{
  "pcep": {
    "1": {
      "description": "Computer Programming and Python Fundamentals. (18% - 7 items)",
      "objectives": {
        "1": "Understand fundamental terms and definitions. \n\n\t- interpreting and the interpreter\n\t- lexis, syntax, and semantics",
        "2": "Understand Python's logic and structure. \n\n\t- keywords\n\t- instructions\n\t- indentation\n\t- comments",
        "3": "Introduce literals and variables into code and use different numeral systems.\n\n\t- Boolean, integers, floating-point numbers\n\t- Scientific notation\n\t- strings\n\t- binary, octal, decimal and hexadecimal numeral systems\n\t- variables\n\t- naming conventions\n\t- implementing PEP-8 recommendations",
        "4": "Choose operators and data types adequate to the problem.\n\n\t- numeric operators (**, *, /, %, //, +, -)\n\t- String operators (+, *)\n\t- Assignment and shortcut operators\n\t- unary and binary operators\n\t- priorities and binding\n\t- bitwise operators (~, &, ^, |, <<, >>)\n\t- Boolean operators (not, and, or)\n\t- Boolean expressions\n\t- relational operators (==, !=, >, >=, <, <=)\n\t- the accuracy of floating-point numbers\n\t- type casting",
        "5": "Perform Input/Output console operations.\n\n\t- the print() and input() functions\n\t- The sep= and end= keyword parameters\n\t- The int() and float() functions"
      }
    },
    "2": {
      "description": "Control Flow - Conditional Blocks and Loops.",
      "objectives": {
        "1": "Make decisions and branch the flow with if keyword.\n\n\t- Conditional statements, if, if-else, if-elif, if-elif-else.\n\t- Multiple conditional statements.\n\t- Nesting conditional statements.",
        "2": "Perform different types of iteration.\n\n\t- The pass instruction\n\t- Building loops with while, for, range(), and in.\n\t- Iterating through sequences.\n\t- Expanding loops with while-else and for-else.\n\t- Nesting loops and conditional statements.\n\t- Controlling loop execution with break and continue."
      }
    },
    "3": {
      "description": "Data Collections - Tuples, Dictionaries, Lists and Strings.",
      "objectives": {
        "1": "Collect and process data using lists.\n\n\t- Constructing vectors.\n\t- Indexing and slicing.\n\t- The len() function.\n\t- List methods: append(), insert(), index(), etc.\n\t- Functions: len(), sorted().\n\t- The del instruction.\n\t- iterating trough lists with the for loop.\n\t- Initializing loops.\n\t- The in and not in operators.\n\t- List comprehensions.\n\t- Copying and cloning.\n\t- Lists in lists, matrices and cubes.",
        "2": "Collect and process data using tuples.\n\n\t- Tuples: indexing, slicing, building, immutability.\n\t- Tuples vs. lists: similarities and differences.\n\t- Lists inside tuples and tuples inside lists.",
        "3": "Collect and process data using dictionaries.\n\n\t- Dictionaries: building, indexing, adding and removing keys.\n\t- Iterating through dictionaries and their keys and values.\n\t- Checking the existence of keys.\n\t- Methods: keys(), items() and values().",
        "4": "Operate with strings.\n\n\t- Constructing strings.\n\t- Indexing, slicing, immutability.\n\t Escaping using the escape character.\n\t- Quotes and apostrophes inside strings.\n\t- Multi-line strings.\n\t- Basic string functions and methods."
      }
    },
    "4": {
      "description": "Functions and Exceptions. (28% - 8 exam items)",
      "objectives": {
        "1": "Decompose the code using functions.\n\n\t- Defining and invoking user-defined functions and generators.\n\t- The return keyword, returning results.\n\t- The None keyword.\n\t- Recursion.",
        "2": "Organize interaction between the function and its environment.\n\n\t- Parameters vs. argumentst- Positional, keyword and mixed argument passing.\n\t- Default parameter values.\n\t- Name scopes, name hiding (shadowing) and the global keyword.",
        "3": "Python built-in exception hierarchy.\n\n\t- BaseException.\n\t- Exception.\n\t- SystemExit.\n\t- KeyboardInterrupt.\n\t- Abstract exceptions.\n\t- ArithmeticError.\n\t- LookupError.\n\t- IndexError.\n\t- KeyError.\n\t- TypeError.\n\t- ValueError.",
        "4": "Basics of exception handling.\n\n\t- Try-except - the try-except Exception.\n\t- Ordering the except branches.\n\t- Propagating exceptions through function boundaries.\n\t- Delegating responsibility for handling exceptions."
      }
    }
  },
  "pcap": {
    "1": {
      "description": "Advanced Python programming concepts and in-depth understanding of Python syntax and semantics.",
      "objectives": {
        "1": "Deepen knowledge of Python's advanced syntax and built-in functions.",
        "2": "Utilize standard libraries to solve more complex problems.",
        "3": "Analyze and understand Python code structure and execution flow."
      }
    },
    "2": {
      "description": "Data structures and algorithms using Python.",
      "objectives": {
        "1": "Examine lists, tuples, dictionaries, and sets in depth.",
        "2": "Implement iterations, comprehensions, and basic algorithmic logic.",
        "3": "Assess algorithm complexity and optimize Python code."
      }
    },
    "3": {
      "description": "Advanced file I/O, module usage, and exception handling.",
      "objectives": {
        "1": "Perform advanced file operations and data serialization.",
        "2": "Employ sophisticated module management and package utilization.",
        "3": "Implement robust error handling and debugging strategies."
      }
    },
    "4": {
      "description": "Object-oriented programming in Python.",
      "objectives": {
        "1": "Design and implement classes and objects.",
        "2": "Apply inheritance, polymorphism, and encapsulation effectively.",
        "3": "Utilize object-oriented design principles for modular code."
      }
    },
    "5": {
      "description": "Advanced topics including generators, iterators, decorators, and working with external libraries.",
      "objectives": {
        "1": "Understand and implement generators and iterators.",
        "2": "Create and apply decorators to enhance code reusability.",
        "3": "Manage virtual environments and integrate external libraries."
      }
    }
  }
}
