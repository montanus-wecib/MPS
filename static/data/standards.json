{
  "pcep": {
    "1": {
      "description": "Computer Programming and Python Fundamentals. (18% - 7 items)",
      "objectives": {
        "1": "Understand fundamental terms and definitions. \n\n\t- interpreting and the interpreter\n\t- lexis, syntax, and semantics",
        "2": "Understand Python's logic and structure. \n\n\t- keywords\n\t- instructions\n\t- indentation\n\t- comments",
        "3": "Introduce literals and variables into code and use different numeral systems.\n\n\t- Boolean, integers, floating-point numbers\n\t- Scientific notation\n\t- strings\n\t- binary, octal, decimal and hexadecimal numeral systems\n\t- variables\n\t- naming conventions\n\t- implementing PEP-8 recommendations",
        "4": "Choose operators and data types adequate to the problem.\n\n\t- numeric operators (**, *, /, %, //, +, -)\n\t- String operators (+, *)\n\t- Assignment and shortcut operators\n\t- unary and binary operators\n\t- priorities and binding\n\t- bitwise operators (~, &, ^, |, <<, >>)\n\t- Boolean operators (not, and, or)\n\t- Boolean expressions\n\t- relational operators (==, !=, >, >=, <, <=)\n\t- the accuracy of floating-point numbers\n\t- type casting",
        "5": "Perform Input/Output console operations.\n\n\t- the print() and input() functions\n\t- The sep= and end= keyword parameters\n\t- The int() and float() functions"
      }
    },
    "2": {
      "description": "Control Flow - Conditional Blocks and Loops.",
      "objectives": {
        "1": "Make decisions and branch the flow with if keyword.\n\n\t- Conditional statements, if, if-else, if-elif, if-elif-else.\n\t- Multiple conditional statements.\n\t- Nesting conditional statements.",
        "2": "Perform different types of iteration.\n\n\t- The pass instruction\n\t- Building loops with while, for, range(), and in.\n\t- Iterating through sequences.\n\t- Expanding loops with while-else and for-else.\n\t- Nesting loops and conditional statements.\n\t- Controlling loop execution with break and continue."
      }
    },
    "3": {
      "description": "Data Collections - Tuples, Dictionaries, Lists and Strings.",
      "objectives": {
        "1": "Collect and process data using lists.\n\n\t- Constructing vectors.\n\t- Indexing and slicing.\n\t- The len() function.\n\t- List methods: append(), insert(), index(), etc.\n\t- Functions: len(), sorted().\n\t- The del instruction.\n\t- iterating trough lists with the for loop.\n\t- Initializing loops.\n\t- The in and not in operators.\n\t- List comprehensions.\n\t- Copying and cloning.\n\t- Lists in lists, matrices and cubes.",
        "2": "Collect and process data using tuples.\n\n\t- Tuples: indexing, slicing, building, immutability.\n\t- Tuples vs. lists: similarities and differences.\n\t- Lists inside tuples and tuples inside lists.",
        "3": "Collect and process data using dictionaries.\n\n\t- Dictionaries: building, indexing, adding and removing keys.\n\t- Iterating through dictionaries and their keys and values.\n\t- Checking the existence of keys.\n\t- Methods: keys(), items() and values().",
        "4": "Operate with strings.\n\n\t- Constructing strings.\n\t- Indexing, slicing, immutability.\n\t Escaping using the escape character.\n\t- Quotes and apostrophes inside strings.\n\t- Multi-line strings.\n\t- Basic string functions and methods."
      }
    },
    "4": {
      "description": "Functions and Exceptions. (28% - 8 exam items)",
      "objectives": {
        "1": "Decompose the code using functions.\n\n\t- Defining and invoking user-defined functions and generators.\n\t- The return keyword, returning results.\n\t- The None keyword.\n\t- Recursion.",
        "2": "Organize interaction between the function and its environment.\n\n\t- Parameters vs. argumentst- Positional, keyword and mixed argument passing.\n\t- Default parameter values.\n\t- Name scopes, name hiding (shadowing) and the global keyword.",
        "3": "Python built-in exception hierarchy.\n\n\t- BaseException.\n\t- Exception.\n\t- SystemExit.\n\t- KeyboardInterrupt.\n\t- Abstract exceptions.\n\t- ArithmeticError.\n\t- LookupError.\n\t- IndexError.\n\t- KeyError.\n\t- TypeError.\n\t- ValueError.",
        "4": "Basics of exception handling.\n\n\t- Try-except - the try-except Exception.\n\t- Ordering the except branches.\n\t- Propagating exceptions through function boundaries.\n\t- Delegating responsibility for handling exceptions."
      }
    }
  },
  "pcap": {
    "1": {
      "description": "Modules and Packages (12% - 6 exam items)",
      "objectives": {
        "1": "Import variants: import, from import, import as, import *\n\t- advanced qualifying for nested modules\n\t- the dir() function\n\t- the sys.path variable",
        "2": "Perform evaluations using the math module\n\t- functions: ceil(), floor(), trunc(), factorial(), hypot(), sqrt()",
        "3": "Generate random values using the random module\n\t- functions: random(), seed(), choice(), sample()",
        "4": "Discover host platform properties using the platform module\n\t- functions: platform(), machine(), processor()\n\tsystem(), version(), python_implementation(), python_version_tuple()",
        "5": "Create and use user-defined modules and packages\n\t- idea and rationale\n\t- the __pycache__ directory\n\t- the __name__ variable\n\t- public and private variables\n\t- the __init__.py file\n\t- searching for/through modules/packages\n\t- nested packages vs. directory trees"
      }
    },
    "2": {
      "description": "Exceptions (14% 5 exam items)",
      "objectives": {
        "1": "Handle errors using Python-defined exceptions\n\t- except, except:-except, except:-else:, except (e1, e2)\n\t- the hierarchy of exceptions\n\t- raise, raise ex\n\t- assert\n\t- event classes\n\t- except E as e\n\t- the arg property",
        "2": "Extend the Python exceptions hierarchy with self-defined exceptions\n\t- self-defined exceptions\n\t- defining and using self-defined exceptions"
      }
    },
    "3": {
      "description": "Strings (18% - 8 exam items)",
      "objectives": {
        "1": "Understand machine representation of characters\n\t- encoding standards: ASCII, UNICODE, UTF-8, code points, escape sequences",
        "2": "Operate on strings\n\t- functions: ord(), chr()\n\t- indexing, slicing, immutability\n\t- iterating through strings, concatenating, multiplying, comparing (against strings and numbers)\n\t- operators: in, not in",
        "3": "Employ built-in string methods\n\t- methods: .isxxx(), .join(), .split(), .sort(), sorted(), .index(), .find(), .rfind()"
      }
    },
    "4": {
      "description": "Object-oriented programming in Python (34% - 12 exam items)",
      "objectives": {
        "1": "Understand the Object-Oriented approach\n\t- ideas and notions: class, object, property, method, encapsulation, inheritance, superclass, subclass, identifying class components",
        "2": "Employ class and object properties\n\t- instance vs. class variables: declarations and initializations\n\t- the __dict__ property (objects vs. classes)\n\t- private components (instances vs. classes)\n\t- name mangling",
        "3": "Equip a class with methods\n\t- declaring and using methods\n\t- the self parameter",
        "4": "Discover the class structure\n\t- introspection and the hasattr() function (objects vs classes)\n\t- properties: __name__, __module__ , __bases__",
        "5": "Build a class hierarchy using inheritance\n\t- single and multiple inheritance\n\t- the isinstance() function\n\t- overriding\n\t- operators: not is, is\n\t- polymorphism\n\t- overriding the __str__() method\n\t- diamonds",
        "6": "Construct and initialize objects\n\t- declaring and invoking constructors"
      }
    },
    "5": {
      "description": "Miscellaneous (22% - 9 exam items)",
      "objectives": {
        "1": "Build complex lists using list comprehension\n\t- list comprehensions: the if operator, nested comprehensions",
        "2": "Embed lambda functions into the code\n\t- lambdas: defining and using lambdas\n\t- self-defined functions taking lambdas as arguments\n\t- functions: map(), filter()",
        "3": "Define and use closures\n\t- closures: meaning and rationale\n\t- defining and using closures",
        "4": "Understand basic Input/Output terminology\n\t- I/O modes\n\t- predefined streams\n\t- handles vs. streams\n\t- text vs. binary modes",
        "5": "Perform Input/Output operations\n\t- the open() function\n\t- the errno variable and its values\n\t- functions: close(), .read(), .write(), .readline(), readlines()\n\t- using bytearray as input/output buffer"
      }
    }
  }
}
