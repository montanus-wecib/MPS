{
    "questions": {
        "pcap.1.1.1": {
            "code": "from matplotlib.pyplot import plot",
            "question": "Which of the following statements is correct about this import statement?",
            "answer": "The plot function resides in the pyplot module which is in the matplotlib package",
            "distractor1": "The matplotlib module resides in the pyplot package",
            "distractor2": "This is importing the plot module from the matplotlib.pyplot package",
            "distractor3": "pyplot is the function being imported from module plot in the matplotlib package",
            "description": "\ud83d\udca1 imports with nested structures have the structure<br><br><code>from package.module import item</code><br><br>\ud83d\udca1 In this case the method \"plot\" is imported from the module \"pyplot\" which resides in the package \"matplotlib\".",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 0.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 1,
            "tags": [
                "import variants",
                "nested modules",
                "from import"
            ]
        },
        "pcap.1.1.2": {
            "code": "from pandas import *",
            "question": "This method of importing ...",
            "answer": "imports all entities in the pandas module into the current project namespace",
            "distractor1": "imports the pandas module with the alias *",
            "distractor2": "Will raise an unhandled exception",
            "distractor3": "imports the * module from the pandas package",
            "description": "\ud83d\udca1 This will bring all entities in the pandas module into your namespace.<br><br>\ud83d\udca1 Since the entities in pandas are now in your project namespace, you do not need to use dot.notation to access them.",
            "video": "https://www.youtube.com/watch?v=iXIeF2UYkW0",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 0.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 1,
            "tags": [
                "import variants",
                "from import",
                "import *"
            ]
        },
        "pcap.1.1.3": {
            "code": "import numpy as np",
            "question": "Which expression will print a list of all items in the numpy module?",
            "answer": "print(dir(np))",
            "distractor1": "help(np)",
            "distractor2": "print(help(np))",
            "distractor3": "contents(numpy)",
            "description": "\ud83d\udca1 This import method assigns an alias for the module name, in this case \"np\"<br><br>\ud83d\udca1 The alias will be used rather than the module name for dot.notation --> \"np.ndarray()\".<br><br>\ud83d\udca1 This is an industry standard way to alias numpy.<br><br>\ud83d\udca1 The numpy module is used for multi-dimensional arrays which are important in mathematical computing.<br><br>\ud83d\udca1 The numpy module was released in 2005 by Travis Oliphant who was also one of the founders of Anaconda and one of the creators of the SciPy package.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 0.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 1,
            "tags": [
                "import variants",
                "import as"
            ]
        },
        "pcap.1.1.4": {
            "code": "import sys",
            "question": "what expression will print out a list of directories where python will search for modules?",
            "answer": "print(sys.path)",
            "distractor1": "print(dir(sys))",
            "distractor2": "print(modules(path))",
            "distractor3": "print(path.sys)",
            "description": "\ud83d\udca1 sys.path is a list of paths as strings.<br><br>\ud83d\udca1 Use .append('path') to add a new path to it.<br><br>\ud83d\udca1 Care should be taken when manipulating sys.path as incorrect paths can lead to frustrating errors.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 1.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 1,
            "tags": [
                "import variants",
                "sys.path"
            ]
        },
        "pcap.1.1.5": {
            "code": "import math as harold\n\nprint(harold.__name__)",
            "question": "What is the expected output of this code?",
            "answer": "math",
            "distractor1": "harold",
            "distractor2": "__main__",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 When a python file is run as a script, its __name__ is \"__main__\".  But when it is imported as a module, its __name__ is the name of the module.<br><br>\ud83d\udca1 The alias \"harold\" in this case is just an alias that can be used in dot notation to refer to the math module; however, the __name__ variable is not set to the alias, it remains the name of the module.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 0.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 1,
            "tags": [
                "import variants",
                "import as",
                "__name__"
            ]
        },
        "pcap.1.2.1": {
            "code": "import math\n \nresult = math.e != math.pow(2, 4)\nprint(int(result))\n\n",
            "question": "What is the expected output of this code?",
            "answer": "1",
            "distractor1": "True",
            "distractor2": "False",
            "distractor3": "2",
            "description": "\ud83d\udca1 math.e is ~2.718 while math.pow(2, 4) is 16.  So the result of line 4 is True.  The code on line 4 casts the result to an integer and the integer value of True is 1.<br><br>\ud83d\udca1 Had the value been False, the integer value of False is 0.<br><br>\ud83d\udca1 Working the other way, from int to boolean, 0 evaluates to False and any non-zero number evaluates to True as boolean.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 2,
            "tags": [
                "import variants",
                "math",
                "boolean expressions",
                "pow()"
            ]
        },
        "pcap.1.3.1": {
            "code": "import random\n\nnums = [1,2,3,4,5,6,7,8]",
            "question": "Which of the following correctly invokes the shuffle function from the random module?",
            "answer": "random.shuffle(nums)",
            "distractor1": "nums.shuffle()",
            "distractor2": "shuffle(nums)",
            "distractor3": "shuffle.random(nums)",
            "description": "\ud83d\udca1 This form of import means that you must use dot notation to access the entities in the random module.<br><br>\ud83d\udca1 This is because the expression \"import random\" only brings random into the project namespace.<br><br>\ud83d\udca1 Had the expression been \"from random import shuffle\", then the shuffle function can be accessed directly without dot notation.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 0.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 3,
            "tags": [
                "import variants",
                "random",
                "shuffle()"
            ]
        },
        "pcap.1.4.1": {
            "code": "import platform",
            "question": "What function from the platform module returns the OS name?",
            "answer": "system",
            "distractor1": "version",
            "distractor2": "machine",
            "distractor3": "processor",
            "description": "\ud83d\udca1 The system function just returns the OS as a string.<br><br>\ud83d\udca1 The platform function also returns the OS name, but includes more information such as the version and service pack number.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 0.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 4,
            "tags": [
                "modules and packages",
                "platform",
                "system"
            ]
        },
        "pcep.1.1.1": {
            "code": "",
            "question": "A code written in a high-level programming language is called:",
            "answer": "a source code",
            "distractor1": "a binary code",
            "distractor2": "machine code",
            "distractor3": "the ASCII code",
            "description": "\ud83d\udca1 Source code is the human readable code written in high-level languages such as Python, Java, and C.<br><br>\ud83d\udca1 Machine code is low-level instructions directly executed by the computer CPU.<br><br>\ud83d\udca1 Binary is not a coding language, but rather the numerical representation of the most basic bits of information in binary computing.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 0.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 1,
            "objective": 1,
            "tags": [
                "python fundamentals"
            ]
        },
        "pcep.1.1.2": {
            "code": "",
            "question": "A process in which the source code is immediately executed without translating it into a machine code is called:",
            "answer": "interpretation",
            "distractor1": "debugging",
            "distractor2": "linking",
            "distractor3": "compilation",
            "description": "\ud83d\udca1 Python is an interpreted language.  First your Python source code is semi-complied into a lower-level language.  Then that semi-complied code is interpreted and executed.<br><br>\ud83d\udca1 Other major interpreted languages are JavaScript, Ruby, Perl, R, and Matlab.<br><br>\ud83d\udca1 Major compiled languages are C++, Java, Swift, and C#.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 0.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 1,
            "objective": 1,
            "tags": [
                "python fundamentals"
            ]
        },
        "pcep.1.1.3": {
            "code": "",
            "question": "Arrange the arithmetic operators in the proper order based on precedence.",
            "answer": "**, //, +",
            "distractor1": "/, **, -",
            "distractor2": "*, +, /",
            "distractor3": "-, *, **",
            "description": "\ud83d\udca1 Remember PEMDAS - Parenthesis, Exponentiation, Multiplication, Division, Addition, Subtraction.<br><br>\ud83d\udca1 When evaluating expressions, you generally work left-to-right except if you have operators with right-sided binding.<br><br>\ud83d\udca1 In this problem \"**\" is \"E\"xponentiation, \"//\" is \"D\"ivision, and \"+\" is \"A\"ddition.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 0.75,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 1,
            "objective": 1,
            "tags": [
                "operators",
                "precedence"
            ]
        },
        "pcep.1.1.4": {
            "code": "",
            "question": "Which of the following expressions evaluate to a non-zero result?",
            "answer": "1 // 2 + 3 * 4",
            "distractor1": "1 ** 2 - 4 // 3",
            "distractor2": "4 / 2 - 2 ** 1",
            "distractor3": "2 ** 3 + (3 - 11)",
            "description": "\ud83d\udca1 1 // 2 evaluates to 0 and 3 * 4 evaluates to 12, 0 + 12 = 12.<br><br>\ud83d\udca1 Remember that // is integer division, it only returns the integer part of the division (i.e., how many times does the denominator go into the numerator?)<br><br>\ud83d\udca1 Unlike division, which always returns a float, integer division returns an integer (as does modulo \"%\").",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 0.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 1,
            "objective": 1,
            "tags": [
                "operators",
                "precedence"
            ]
        },
        "pcep.1.4.1": {
            "code": "my_list = [0, .0, True]",
            "question": "Which of the following statements evaluates to False?",
            "answer": "len(my_list) == my_list[0]",
            "distractor1": "0.0 in my_list",
            "distractor2": "len(sorted(my_list)) == len(my_list)",
            "distractor3": "my_list[-1] == 1",
            "description": "\ud83d\udca1 len(my_list) evaluates to 3 and the value in my_list at index 0 is a 0, therefor 3 == 0 is False. <br><br>\ud83d\udca1 One the PCEP, make sure you read the question carefully! Many students answer a question like this assuming it is asking for the True result.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 1,
            "objective": 4,
            "tags": [
                "list",
                "indexing",
                "sorted",
                "boolean expressions"
            ]
        },
        "pcep.1.4.2": {
            "code": "print(42 + 5.0 * 3 + 22 // 4 + 11 % 3)",
            "question": "What is the output of this code?",
            "answer": "64.0",
            "distractor1": "64",
            "distractor2": "54",
            "distractor3": "64.5",
            "description": "\ud83d\udca1 Break this expression down into four parts:<br><br>\n42 = 42<br>\n5.0 * 3  = 15.0<br>\n22 // 4 = 5<br>\n11 % 3 = 2<br><br>\n\ud83d\udca1 42 + 15.0 + 5 + 2 = 64.0<br><br>\n\ud83d\udca1 The 5.0 introduces a float into the expression, the result of an expression involving a float will be a float.  If you aren't careful, you could choose 64 as the answer, which is incorrect!",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 1,
            "objective": 4,
            "tags": [
                "operators",
                "precedence"
            ]
        },
        "pcep.1.4.3": {
            "code": "print(6 // 5 * 16 / 2 ** 2 ** 2)",
            "question": "What is the output of this code?",
            "answer": "1.0",
            "distractor1": "4096.0",
            "distractor2": "1",
            "distractor3": "16.0",
            "description": "\ud83d\udca1 This question involves an operator with right-sided binding (**).<br><br>\ud83d\udca1 With PEMDAS, we know we start with the exponentiation, but becuase of the right-sided binding, we work from right-to-left on this part --> 2 ** 2 ** 2.<br><br>\ud83d\udca1 The 2 ** 2 ** 2 simplifies to 2 ** 4, which is 16.<br><br>\ud83d\udca1 Now we have simplified to 6 // 5 * 16 / 16 which simplifies to 1.0 * 1 which is 1.0.<br><br>\n",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 1,
            "objective": 4,
            "tags": [
                "operators",
                "precedence",
                "binding"
            ]
        },
        "pcep.1.4.4": {
            "code": "print(6 // (5 * 16) / 2 ** 2 ** 2)",
            "question": "What is the output of this code?",
            "answer": "0.0",
            "distractor1": "64.0",
            "distractor2": "16.0",
            "distractor3": "4.0",
            "description": "\ud83d\udca1 Follow PEMDAS --> start in the parenthesis.  (5 * 16) = 80.<br><br>\ud83d\udca1 Now we have 6 // 80 / 2 ** 2 ** 2.  Although we should work on the exponentiation, we can see that 6 // 80 will be 0, so this will make the entire expression 0.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 1,
            "objective": 4,
            "tags": [
                "operators",
                "precedence",
                "binding"
            ]
        },
        "pcep.1.5.1": {
            "code": "width = 4\nheight = 5\nprint(width, height, sep=\"*\")",
            "question": "What is the expected output?",
            "answer": "4*5",
            "distractor1": "20",
            "distractor2": "4*5*",
            "distractor3": "*4*5*",
            "description": "\ud83d\udca1 The sep argument is used to specify a string that separates the objects being printed.  In this case the objects being printed are 4 and 5.<br><br>\ud83d\udca1 The sep character only prints between objects to be printed.<br><br>\ud83d\udca1 Beware of trick question that include the sep argument with print calls on a single object like print(x, sep=\"*\").  In this case, no asterisk will print because there is only one object printed.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 0.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 1,
            "objective": 5,
            "tags": [
                "input and output",
                "python fundamentals"
            ]
        },
        "pcep.2.1.1": {
            "code": "stars = 1 + 1 // 2 * 3\n\nif stars > 0:\n  print(\"*\")\n\nelif stars > 1:\n  print(\"**\")\n  \nelse:\n  print(\"***\")",
            "question": "How many stars will print?",
            "answer": "1",
            "distractor1": "2",
            "distractor2": "3",
            "distractor3": "None",
            "description": "\ud83d\udca1 Since this question doesn't involve a function or class definition, start at the top and work your way through the code.<br><br>\nstars = 1 + 1 // 2 * 3 = 1 + 0 * 3 = 1<br>\nif stars > 0 --> True --> print *<br><br>\ud83d\udca1 The elif and else branches will not be executed becuase the if condition was True.<br><br>\ud83d\udca1 Remember an elif or else clause will only be executed when the related if and all preceding elif conditions are False.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 1,
            "tags": [
                "if",
                "operators",
                "boolean expressions",
                "precedence"
            ]
        },
        "pcep.2.1.10": {
            "code": "x=8\ny=10\nz=12\n\nif x<y:\n  if x<z:\n    print(\"the smallest number is: \", x)\nelif y<x:\n  if y<z:\n    print(\"The smallest number is: \", y)\nelif z<x:\n  if z<y:\n    print(\"The smallest number is: \", z)\nelse:\n  print(\"else\")",
            "question": "What is the expected output?",
            "answer": "the smallest number is:  8",
            "distractor1": "the smallest number is:  10",
            "distractor2": "the smallest number is:  12",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 The first if x < y is True --> The the nested if x < z is evaluated as True --> \"the smallest number is 8\" prints.<br><br>\ud83d\udca1 None of the other elif statments or the else will print since the original if condition was True.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 1,
            "tags": [
                "if",
                "nested if",
                "boolean expressions",
                "input and output"
            ]
        },
        "pcep.2.1.11": {
            "code": "x = 42\ny = 42.0\n \nif x == y:\n  print('True', x+y)\nelse:\n  print('False', x-y)",
            "question": "What is the expected output of this code?",
            "answer": "True 84.0",
            "distractor1": "True",
            "distractor2": "False",
            "distractor3": "False 0.0",
            "description": "\ud83d\udca1 The expression x == y is evaluating whether the numeric quantity of 42 and 42.0 are equal, which they are.  So x == Y evaluates to True and the code prints True 84.0.<br><br>\ud83d\udca1 The result of 42 + 42.0 is a float result.  Any time you involve a float in a numeric operation, the result will be a float.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 1,
            "tags": [
                "if",
                "python fundamentals",
                "boolean expressions"
            ]
        },
        "pcep.2.1.12": {
            "code": "if True == True:\n  if False == 0:\n    print('a', end=\"\")\n  else:\n    print('aa', end=\"\")\n  print('aaa', end=\"\")\n  if True < False:\n    print('aaaa', end=\"\")\n  else:\n    print('aaaaa', end=\"\")",
            "question": "What is the expected output of this code?",
            "answer": "aaaaaaaaa",
            "distractor1": "aaa",
            "distractor2": "aaaaaaaa",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 Only the following print calls will be executed<br><br>\nLine 3 - print('a', end='')<br>\nLine 6 - print('aaa', end='')<br>\nLine 10 - print('aaaaa', end='')<br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 1,
            "tags": [
                "if",
                "boolean expressions",
                "nested if",
                "input and output"
            ]
        },
        "pcep.2.1.13": {
            "code": "a = 42\nb = 13\nc = 42 // 13 + 3 * 2 ** 3\n\nif c != 5:\n  print ('x', end=\" \")\nif c > 7:\n  print('y', end=\" \")\nif c <= 10:\n  print('z', end=\" \")",
            "question": "What is the expected output of this code?",
            "answer": "x y",
            "distractor1": "x z",
            "distractor2": "x y z",
            "distractor3": "y z",
            "description": "\ud83d\udca1 c = 42 // 13 + 3 * 2 ** 3 = 3 + 3 * 8 = 27<br><br>\n\ud83d\udca1 c != 5 is True --> print 'x'<br><br>\n\ud83d\udca1 c > 7 is True --> print 'y'<br><br>\n\ud83d\udca1 c <= 10 is False<br><br>\n\ud83d\udca1 This prints x y because the end argument is set to a space (\" \")",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 1,
            "tags": [
                "operators",
                "precedence",
                "if",
                "boolean expressions"
            ]
        },
        "pcep.2.1.14": {
            "code": "points = [65, 75, 90, 80, 80, 100, 100]\navg = sum(points) // len(points)\n\nif 91 <= avg <= 100:\n  grade = 10\nelif 81 <= avg < 90:\n  grade = 9\nelif 71 <= avg < 80:\n  grade = 8\nelif 61 <= avg < 70:\n  grade = 7\nelif 51 <= avg < 60:\n  grade = 6\nelse:\n  grade = 5\n \nprint(grade)",
            "question": "What is the expected output?",
            "answer": "9",
            "distractor1": "8",
            "distractor2": "7",
            "distractor3": "6",
            "description": "\ud83d\udca1 On the PCEP, use the on-screen calculator for a question like this.<br><br>\ud83d\udca1 The sum(points) is 590 and 590 // 7 = 84.<br><br>\ud83d\udca1 The if/elif branch triggered is on line 6 --> elif 81 <= avg < 90.<br><br>\ud83d\udca1 grade = 9<br><br>\ud83d\udca1 No other elif/else branches can be executed --> print(9)",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 1,
            "tags": [
                "if",
                "lists",
                "operators",
                "len"
            ]
        },
        "pcep.2.1.15": {
            "code": "x = True\ny = False\nz = False\n \nif not x or y:\n    print(1)\nelif not x or not y and z:\n    print(2)\nelif not x or y or not y and x:\n    print(3)\nelse:\n    print(4)",
            "question": "What is the expected output?",
            "answer": "3",
            "distractor1": "2",
            "distractor2": "1",
            "distractor3": "4",
            "description": "\ud83d\udca1 The first True condition is on line 9 - Break it down like this:<br><br>Expression: not x or y or not y and x<br><br>1) not y and x --> Not False and True ==> True<br><br>2) not x --> not True ==> False<br><br>3) False or y or True --> False or False or True ==> True",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 1,
            "tags": [
                "if",
                "boolean operators",
                "boolean expressions"
            ]
        },
        "pcep.2.1.16": {
            "code": "x = False\ny = False\nz = True\n \nif not x or not y:\n  print(1)\nelif not x or not y and z:\n  print(2)\nelif x or y or not y and not x:\n  print(3)\nelse:\n  print(4)",
            "question": "What is the expected output?",
            "answer": "1",
            "distractor1": "2",
            "distractor2": "3",
            "distractor3": "4",
            "description": "\ud83d\udca1 The first True condition is on line 5 - Break it down like this:<br><br>Expression: not x or not y<br><br>1) not x --> not False ==> True<br><br>2) not y --> not False ==> True<br><br>3) True or True ==> True",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 1,
            "tags": [
                "if",
                "boolean operators",
                "boolean expressions"
            ]
        },
        "pcep.2.1.17": {
            "code": "x=\"None\"\n\nif x:\n    if x[1:3] == \"on\":\n        print(\"Hello\")\n    else:\n        print(\"Good Bye\")\n\nelse:\n  print(\"See ya later\")",
            "question": "What is the expected output?",
            "answer": "Hello",
            "distractor1": "Good Bye",
            "distractor2": "See ya later",
            "distractor3": "None",
            "description": "\ud83d\udca1 Since x is a non-empty string, the condition on line 3 is True so the outer if is entered.<br><br>\ud83d\udca1 The expression x[1:3] slices the two letters at indexes 1 and 2 which is \"on\"<br><br>\ud83d\udca1 The condition on line 4 is true and the if branch is excecuted, printing \"Hello\".<br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 1,
            "tags": [
                "if",
                "nested if",
                "lists",
                "slicing",
                "boolean expressions"
            ]
        },
        "pcep.2.1.18": {
            "code": "data = [False]\n\nprint(data[-1], end=\" \")\n\nif not data.pop():\n    print(\"Advertising\", end=\" \")\nelse:\n    print(\"Claim\")",
            "question": "What is the output of this code?",
            "answer": "False Advertising",
            "distractor1": "Advertising",
            "distractor2": "Claim",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 The print on line 3 prints the last item from the list \"data\", which is the boolean False.<br><br>\ud83d\udca1 The condition on line 5 reads as if not False, which is True and the if branch is entered.<br><br>\ud83d\udca1 The code in the if branch on line 6 prints \"Advertising \"<br><br>\ud83d\udca1 Both print statements have end=\" \" so both printed objects are followed by a space.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 1,
            "tags": [
                "if",
                "lists",
                "indexing",
                "pop",
                "input and output",
                "boolean operators",
                "boolean expressions"
            ]
        },
        "pcep.2.1.19": {
            "code": "data = [False]\n\nprint(data[1], end=\" \")\n\nif not data.pop():\n    print(\"Advertising\", end=\" \")\nelse:\n    print(\"Claim\")",
            "question": "What is the expected output of this code?",
            "answer": "This code is erroneous",
            "distractor1": "False Advertising",
            "distractor2": "Advertising",
            "distractor3": "False Claim",
            "description": "\ud83d\udca1 On line 3, the expression data[1] will raise an IndexError since the list \"data\" only has one item.<br><br>\ud83d\udca1 This exception will go unhandled and the code will stop.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 1,
            "tags": [
                "if",
                "lists",
                "indexing",
                "pop",
                "boolean operators",
                "boolean expressions",
                "input and output"
            ]
        },
        "pcep.2.1.2": {
            "code": "a = 13\nb = 42\n \nc = a < 30 or b > a and b > 50 and a < b\n\nif c:\n  print(\"Wolf!\")\n  \nelse:\n  print(\"Pack!\")",
            "question": "What is the expected output of this code?",
            "answer": "Wolf!",
            "distractor1": "Pack!",
            "distractor2": "True",
            "distractor3": "False",
            "description": "\ud83d\udca1 The value of c is True, thus the if branch on line 6 will be entered.  Break the expression down like this:<br><br>1) b > a and b > 50 --> True and False ==> False<br><br>2) b > a and b > 50 and a < b --> False and True ==> False<br><br>3) a < 30 or False --> True or False ==> True<br><br>\ud83d\udca1 print on line 7 is executed ==> \"Wolf!\"",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 1,
            "tags": [
                "operators",
                "boolean expresions",
                "boolean operators"
            ]
        },
        "pcep.2.1.20": {
            "code": "input = 3\n\nif (input == 1):\n    print(\"1\")\nelif (input == 2):\n    print(\"2\")\n\nprint(\"3\")",
            "question": "What is the expected output of this code?",
            "answer": "3",
            "distractor1": "1",
            "distractor2": "2",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 Neither of the conditions on lines 3 and 5 are True.  Therefore the code on line 8 is executed and \"3\" prints.<br><br>\ud83d\udca1 Code that is part of an if or elif branch will only be executed if the condition is True.<br><br>\ud83d\udca1 Code that is not indented (such as line 8) is not part of a routine and will be executed.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 1,
            "tags": [
                "if",
                "boolean expressions"
            ]
        },
        "pcep.2.1.3": {
            "code": "x = 42\n \nif x > 10 or not x >= 42:\n  print(\"Hey\", end=\"-\")\nif x > 42:\n  print(\"Hee\", end=\"-\")\nelif x >= 42:\n  print(\"Hi\", end=\"-\")\nelse:\n  print(\"Ho\", end=\"-\")",
            "question": "What will print when this code is run?",
            "answer": "Hey-Hi-",
            "distractor1": "Hey Hi",
            "distractor2": "Hey-Hi",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 The condition on line 3 is True since x > 10 is True.  \"Hey-\" prints with no new line.<br><br>\ud83d\udca1 The condition on line 5 is False.<br><br>\ud83d\udca1 The condition on line 7 is True so \"Hi-\" prints on the same line<br><br>\ud83d\udca1 The result is \"Hey-Hi-\"",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 1,
            "tags": [
                "if",
                "boolean expressions",
                "boolean operators",
                "operators",
                "input and output"
            ]
        },
        "pcep.2.1.4": {
            "code": "x = 42\n \nif x > 10 or not x >= 42:\n  print(\"Hey\", end=\"-\")\nif x > 42:\n  print(\"Hee\", end=\"-\")\nelif x =< 42:\n  print(\"Hi\", end=\"-\")\nelse:\n  print(\"Ho\", end=\"-\")",
            "question": "What is the expected output of this code?",
            "answer": "This code is erroneous",
            "distractor1": "Hey-Hi-",
            "distractor2": "Hey-Hi",
            "distractor3": "Hey Hi",
            "description": "\ud83d\udca1 There is a SyntaxError on line 7. <br><br>\ud83d\udca1 Python interprets this as assigning x to be equal to <, which raises a SyntaxError.<br><br>\ud83d\udca1 The correct expression would be: elif x <= 42:",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 1,
            "tags": [
                "if",
                "boolean expressions",
                "boolean operators",
                "input and output"
            ]
        },
        "pcep.2.1.5": {
            "code": "a = 0\nb = True\nc = False\n\nif a ^ b: \n  print('x', end=\"\")\nif b or c:\n  print('y', end=\"\")\nif a and not c:\n  print('z', end=\"\")",
            "question": "What is the expected ouput of this code?",
            "answer": "xy",
            "distractor1": "xyz",
            "distractor2": "yz",
            "distractor3": "xz",
            "description": "\ud83d\udca1 The condition on line 5 is True, \"x\" prints with no new line.<br><br>\ud83d\udca1 The condition on line 7 is True, \"y\" prints on the same line.<br><br>\ud83d\udca1 The condition on line 9 is False.<br><br>\ud83d\udca1 The operator on line 5 \"^\" is the bitwise XOR, if the binary values of the operands are different, it returns 1 or True.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 1,
            "tags": [
                "if",
                "bitwise operators",
                "boolean expressions",
                "input and output"
            ]
        },
        "pcep.2.1.6": {
            "code": "a = 1\nb = 0\nc = False\n\nif a ^ b: \n  print('x', end=\"\")\nif b or c:\n  print('y', end=\"\")\nif a and not c:\n  print('z', end=\"\")",
            "question": "What is the expected output?",
            "answer": "xz",
            "distractor1": "xy",
            "distractor2": "yz",
            "distractor3": "xyz",
            "description": "\ud83d\udca1 The condition on line 5 is True, \"x\" prints with no new line.<br><br>\ud83d\udca1 The condition on line 7 is False.<br><br>\ud83d\udca1 The condition on line 9 is True, \"z\" prints on the same line ==> \"xz\".<br><br>\ud83d\udca1 The operator on line 5 \"^\" is the bitwise XOR, if the binary values of the operands are different, it returns 1 or True.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 1,
            "tags": [
                "boolean operators",
                "boolean expressions",
                "if",
                "bitwise operators",
                "input and output"
            ]
        },
        "pcep.2.1.7": {
            "code": "x = 0 + True\n \nif bool(\"\") ^ bool([]):    \n  if x < 0:\n    print('Less than 0')\n  elif x > 0:\n    print('Greater than 0')\n  elif x == 0:\n    print('is 0')\nelse:\n   print('mysterious output')",
            "question": "What is the expected output of this code?",
            "answer": "mysterious output",
            "distractor1": "This code is erroneous",
            "distractor2": "Less than 0",
            "distractor3": "Greater than 0",
            "description": "\ud83d\udca1 The condition on line 3 is False, therefore the <code>if</code> branch is ignored and the <code>else</code> branch prints \"mysterious output\".<br><br>\ud83d\udca1 In general, empty collections have boolean values of False - both bool(\"\") and bool([]) are false.<br><br>\ud83d\udca1 Since both expressions are False, the result of the bitwise XOR (\"^\") is 0 or False - recall XOR returns 1 if bits are different, else 0.<br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 1,
            "tags": [
                "boolean expresions",
                "bitwise operators",
                "if",
                "nested if",
                "casting"
            ]
        },
        "pcep.2.1.8": {
            "code": "x = 52 >> 2\n\nif x != 13:\n  print(\"*\",end=',')\n  if x < 7:\n    print(\">\")\n  elif x == 20:\n    print(\">>\")\n  else:\n    print(\"+\" * 3) \nelse:\n  print(\"-2\" * 2)",
            "question": "What is the output of this code?",
            "answer": "-2-2",
            "distractor1": "*,>",
            "distractor2": "*,>>",
            "distractor3": "*,+++",
            "description": "\ud83d\udca1 The condition on line 3 is False, therefore the <code>if</code> branch is ignored and the <code>else</code> branch is executed, printing -2-2.<br><br>\ud83d\udca1 The condition is False because <code>52 >> 2</code> is equal to 13.  There are two ways to solve this bitwise shift:<br><br> This: <code>52 // 2<sup>2</sup> = 13 or ...</code>.<br><br>1: Convert to Binary --> 52<sub>10</sub> = 110101<sub>2</sub><br>2: Drop the  right 2 digits --> 110101<sub>2</sub> >> 2 = 1101<sub>2</sub><br>3: Convert back to base-10 --> 1101<sub>2</sub> = 13<sub>10</sub>.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 1,
            "tags": [
                "if",
                "nested if",
                "bitwise shift",
                "boolean expressions",
                "input and output"
            ]
        },
        "pcep.2.1.9": {
            "code": "country = float(\"3.4\")\n\nif type(country) != int:\n    if country >= 3:\n        print(\"France\")\n    elif country >= 2:\n        print(\"Germany\")\n    elif country >= 1:\n        print(\"England\")\n\nelse:\n    print(\"Elsewhere\")",
            "question": "What is the expected output of this code?",
            "answer": "France",
            "distractor1": "Elsewhere",
            "distractor2": "Germany",
            "distractor3": "England",
            "description": "\ud83d\udca1 The condition on line 3 is True, the outer <code>if</code> branch is entered.<br><br>\ud83d\udca1 The condition on line 4 is True, the code on line 5 is executed, printing \"France\".<br><br>\ud83d\udca1 All other <code>elif/else</code> branches are ignored.<br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 1,
            "tags": [
                "if",
                "casting",
                "boolean expressions"
            ]
        },
        "pcep.2.2.1": {
            "code": "total = 0\n\nfor i in range(5):\n  \n  if i % 2 == 1:\n    total += 1\n    \nelse:\n  total -= 1\n  \nprint(total)\n    ",
            "question": "What is the value of total?",
            "answer": "1",
            "distractor1": "2",
            "distractor2": "3",
            "distractor3": "The code enters an infinite loop",
            "description": "\ud83d\udca1 The <code>for</code> loop created on line 3 creates 5 iterations of i with values from 0 to 4.<br><br>\ud83d\udca1  The <code>if</code> on line 5/6 increments total only when i is 1 and 3 - those are the only times when the condition <code>i % 2 == 1</code> is True.<br><br>\ud83d\udca1  So total is 2 after the loop completes, then the <code>else</code> branch on line 8/9 decrements total by 1 - the final value of total is 1.<br><br>\ud83d\udca1 Remember, an else branch executes as long as the loop finishes naturally.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "for",
                "if",
                "boolean expressions"
            ]
        },
        "pcep.2.2.10": {
            "code": "x = [False, True, True, False, True]\ny = x[:]\ni = 0\n\nfor j in y[2:]:\n  if j:\n    i +=1\n\nprint(i)",
            "question": "What is the expected output of this code?",
            "answer": "2",
            "distractor1": "3",
            "distractor2": "1",
            "distractor3": "0",
            "description": "\ud83d\udca1 The expression <code>y = x[:]</code> on line 2 sets y equal to a copy of x.<br><br>\ud83d\udca1 The loop in lines 5-7 simply counts the number of True in the slice <code>y[2:]</code> which is <code>[True, False, True]</code><br><br>\ud83d\udca1 Since there are two True values, the value of i increments to 2<br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "lists",
                "slicing",
                "for",
                "if",
                "boolean"
            ]
        },
        "pcep.2.2.11": {
            "code": "x = 42\n\nfor i in range(2, 8, 2):\n  for j in range(-5, 2, 3):\n    if i==j:\n      x += 2\n    else:\n      break\n\nprint(x)",
            "question": "What is the expected output of this code?",
            "answer": "42",
            "distractor1": "46",
            "distractor2": "44",
            "distractor3": "48",
            "description": "\ud83d\udca1 The outer loop creates the sequence 2, 4, 6 while the inner loop creates the sequence -5, -2, 1.<br><br>\ud83d\udca1 The <code>if</code> branch on lines 5-8 will increment x by 2 if i and j are equal.<br><br>\ud83d\udca1 However, i and j will never be equal and in the very first iteration i=2 and j=-5 which causes the loop to break without ever incrementing x.  So x remains unchanged at 42.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "for",
                "if",
                "nested loops",
                "break",
                "boolean expressions"
            ]
        },
        "pcep.2.2.12": {
            "code": "x = 0\n\nfor i in range(-2, 4, 2):\n  if 4 * i < 8:\n    x += 3\nelse:\n  x += 2\n    \nprint(x)",
            "question": "What is the expected output of this code?",
            "answer": "8",
            "distractor1": "0",
            "distractor2": "3",
            "distractor3": "5",
            "description": "\ud83d\udca1 The loop on line 3 creates the sequence for i = -2, 0, 2.<br><br>\ud83d\udca1 The condition on line 4 will be true for values of i of -2 and 0 so x will be incremented by 3 twice to become 6.<br><br>\ud83d\udca1 When the loop completes x is 6 and then gets incremented by 2 in the <code>else</code> clause to reach 8.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "for",
                "if",
                "else",
                "boolean expressions"
            ]
        },
        "pcep.2.2.13": {
            "code": "data=\"\"\n\nwhile data:\n  print(\"Data is not empty\")\nelse:\n  print(\"Data is empty\")",
            "question": "What is the expected output of this code?",
            "answer": "Data is empty",
            "distractor1": "Data is not empty",
            "distractor2": "This code raises an exception",
            "distractor3": "This code creates an infinite loop",
            "description": "\ud83d\udca1 The condition on line 3 is <code>false</code>, so the <code>while</code> loop ends immediately.<br><br>\ud83d\udca1 The <code>else</code> branch on lines 5-6 prints \"Data is empty\".<br><br>\ud83d\udca1 Remember, the <code>else</code> branch runs if the <code>while</code> loop ends naturally.  In this case the loop ended naturally even though it didn't do anything.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 0.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "while",
                "else"
            ]
        },
        "pcep.2.2.14": {
            "code": "x = 3\n\nwhile x != 0:\n  x //= 2\n  print('*', sep=\"\", end=\"*\")\nelse:\n  print('*', sep=\"\", end=\"*\")",
            "question": "What is the expected output of this code?",
            "answer": "******",
            "distractor1": "***",
            "distractor2": "**",
            "distractor3": "****",
            "description": "\ud83d\udca1 Each time the <code>while</code> loop runs, the code will print ** with no new line.<br><br>\ud83d\udca1 The loop will run twice - once when x is 3, then again when x is 1.<br><br>\ud83d\udca1 After the loop completes, the <code>else</code> branch will print another **<br><br>\ud83d\udca1 So in the loop ** and ** print, then in the else ** prints - all on the same line so ****** prints.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "while",
                "else",
                "input and output"
            ]
        },
        "pcep.2.2.15": {
            "code": "x = 2\n\nwhile x < 4:\n  x += 1\n  if (x == 3):\n    continue\n  else:\n    print('*', end=\"*\")\nelse:\n  print('*')",
            "question": "What is the expected output of this code?",
            "answer": "***",
            "distractor1": "****",
            "distractor2": "**",
            "distractor3": "*****",
            "description": "\ud83d\udca1 The first time through the loop, x gets incremented to 3 making the <code>if</code> conditional <code>True</code>.  This causes the loop to continue to the next iteration.<br><br>\ud83d\udca1 On the next iteration, x gets incremented to 4 and the <code>else</code> branch executes, printing ** - the loop is complete.<br><br>\ud83d\udca1 Next, the <code>else</code> branch on lines 9-10 executes since the loop completed naturally and prints *<br><br>\ud83d\udca1 *** is printed together since no new lines were printed.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "while",
                "if",
                "else",
                "boolean expressions",
                "input and output"
            ]
        },
        "pcep.2.2.16": {
            "code": "i = 0\n\nwhile i != 0:\n  i = i + 1\nelse:\n  i = i + 1\n    \nprint(i)",
            "question": "What is the expected output of this code?",
            "answer": "1",
            "distractor1": "2",
            "distractor2": "0",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "while",
                "else",
                "boolean expressions"
            ]
        },
        "pcep.2.2.17": {
            "code": "x='Rappahannok'\n\ny=0\nwhile y<len(x):\n  y+=1\n  pass\n    \nprint(\"y: \", y)",
            "question": "What is the expected output of this code?",
            "answer": "y:  11",
            "distractor1": "y:",
            "distractor2": "y:  0",
            "distractor3": "y:  10",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "while",
                "pass",
                "boolean expressions",
                "len"
            ]
        },
        "pcep.2.2.18": {
            "code": "a = 'Mavericks'\ni = 7\n\nwhile i < len(a):\n  i += 2\n    \nprint(i+1)",
            "question": "What is the expected output of this code?",
            "answer": "10",
            "distractor1": "7",
            "distractor2": "9",
            "distractor3": "11",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "while",
                "boolean expressions",
                "len"
            ]
        },
        "pcep.2.2.19": {
            "code": "num = 10\n\nfor i in range(10):\n  for j in range(2, 15, 3):\n    if num % 2 == 0:\n      continue\n      num += 1\n  num+=1\nelse:\n  num+=1\n    \nprint(num)",
            "question": "What is the expected output of this code?",
            "answer": "21",
            "distractor1": "11",
            "distractor2": "10",
            "distractor3": "This code creates an infinite loop.",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "for",
                "nested loops",
                "if",
                "continue",
                "boolean expressions",
                "range"
            ]
        },
        "pcep.2.2.2": {
            "code": "torque = 1\n\nwhile torque < 2:\n  torque *= 2\n  print(\"@\", end=\"\")\n  \nelse:\n  print(\"@\")",
            "question": "What is the expected output of this code?",
            "answer": "@@",
            "distractor1": "@",
            "distractor2": "@@@",
            "distractor3": "This code enters an infinite loop",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "while",
                "input and output",
                "boolean expressions"
            ]
        },
        "pcep.2.2.20": {
            "code": "sport=\"judo\"\n\nfor i in range (0, len(sport)):\n  print(sport[i], end=\"*\", sep=\"-\")",
            "question": "What is the expected output of this code?",
            "answer": "j*u*d*o*",
            "distractor1": "j-u-d-o*",
            "distractor2": "0-1-2-3",
            "distractor3": "0*1*2*3",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "for",
                "indexing",
                "len"
            ]
        },
        "pcep.2.2.21": {
            "code": "while True:\n    \n  password = input()\n  if password == 'qwerty':\n    print(\"Ok password: \", password)\n    break\n    print(\"End\")\n  else:\n    print(\"Wrong password: \", password)",
            "question": "What is the expected output of this code?",
            "answer": "Ok password:  qwerty",
            "distractor1": "End",
            "distractor2": "Wrong password:  qwerty",
            "distractor3": "Ok password:  qwerty End",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "while",
                "if",
                "break",
                "boolean expressions"
            ]
        },
        "pcep.2.2.22": {
            "code": "a = 13\nb = 42\n \nwhile a < b:\n  print(\"*\", sep=\"-\", end=\"\")\n  a += 7",
            "question": "What is the expected output of this code?",
            "answer": "*****",
            "distractor1": "*-*-*-*-*",
            "distractor2": "****",
            "distractor3": "*****-",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "while",
                "boolean expressions",
                "input and output"
            ]
        },
        "pcep.2.2.23": {
            "code": "for i in range(-3, 3, 2):\n  print(\"*\", end=\"\")",
            "question": "What is the expected output of this code?",
            "answer": "***",
            "distractor1": "**",
            "distractor2": "****",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "for",
                "range",
                "input and output"
            ]
        },
        "pcep.2.2.24": {
            "code": "x=42\n\nwhile x<46:\n  x+=1\n  print(x)\n  break\nelse:\n  print(\"break\")",
            "question": "What is the expected output of this code?",
            "answer": "43",
            "distractor1": "46",
            "distractor2": "44",
            "distractor3": "break",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "while",
                "break",
                "boolean expressions"
            ]
        },
        "pcep.2.2.25": {
            "code": "x = 'State'\n\nfor char in x:\n  if char == 't':\n    break\n  print(char)\nelse:\n  print('Finished!')",
            "question": "What is the expected output of this code?",
            "answer": "S",
            "distractor1": "t",
            "distractor2": "Finished",
            "distractor3": "char",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "for",
                "if",
                "break",
                "else",
                "boolean expressions"
            ]
        },
        "pcep.2.2.3": {
            "code": "others = 0\n\nfor i in range(2):\n  for j in range(2):\n    if i != j:\n      others += 1\n\nelse:\n  others += 1\n  \nprint(others)\n      ",
            "question": "What is the value of others?",
            "answer": "3",
            "distractor1": "1",
            "distractor2": "2",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "for",
                "nested loops",
                "boolean expressions"
            ]
        },
        "pcep.2.2.4": {
            "code": "power = 1\n\nwhile power != 10:\n  power *= 2\n  if power == 5:\n    continue\n  print(\"@\", end=\"\")\n  \nelse:\n  print(\"@\")",
            "question": "What is the expected result of this code?",
            "answer": "The program enters an infinite loop.",
            "distractor1": "@@@",
            "distractor2": "@@",
            "distractor3": "@",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "while",
                "continue",
                "boolean expressions",
                "input and output"
            ]
        },
        "pcep.2.2.5": {
            "code": "answers = (True, False, True)\n\nselection = answers[2:]\n\npoints = 0\n\nfor answer in selection[-1:]:\n  if answer:\n    points += 1\n    \nprint(points)",
            "question": "What is the result of this code?",
            "answer": "1",
            "distractor1": "2",
            "distractor2": "0",
            "distractor3": "3",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "tuples",
                "slicing",
                "indexing",
                "for",
                "if"
            ]
        },
        "pcep.2.2.6": {
            "code": "tot = 0\n\nfor n in range(5):\n    if n == 3:\n        break\n    else:\n        tot += 1\nelse:\n    tot -= 1\n\nprint(tot)",
            "question": "What is the output of this code?",
            "answer": "3",
            "distractor1": "4",
            "distractor2": "2",
            "distractor3": "1",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "for",
                "if",
                "break",
                "boolean expressions"
            ]
        },
        "pcep.2.2.7": {
            "code": "sports = ['basketball', 'judo', 'tennis', 'football']\nfor sport in sports:\n  if sport != 'judo':\n    print(sport, end=',')",
            "question": "What is the expected output of this code?",
            "answer": "basketball, tennis, football",
            "distractor1": "basketball, judo, football",
            "distractor2": "judo",
            "distractor3": "basketball judo tennis football",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "lists",
                "for",
                "input and output"
            ]
        },
        "pcep.2.2.8": {
            "code": "for x in range(13, 2, -2):\n  print(x, end=\",\", sep=\" \")",
            "question": "What is the output of this code?",
            "answer": "13,11,9,7,5,3",
            "distractor1": "2,4,6,8,10,11",
            "distractor2": "13 11 9 7 5 3,",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "for",
                "range",
                "input and output"
            ]
        },
        "pcep.2.2.9": {
            "code": "var=0\n\nfor i in range(3):\n  for j in range(-2, -7, -2):\n    var+=1\n\nprint(var)",
            "question": "What is the expected output of this code?",
            "answer": "9",
            "distractor1": "15",
            "distractor2": "10",
            "distractor3": "5",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 2,
            "objective": 2,
            "tags": [
                "for",
                "nested loops",
                "range"
            ]
        },
        "pcep.3.1.1": {
            "code": "lst = [True, 3.14, -1]\nx=-1 in lst\ny= lst.index(-1) not in lst\nz = lst[lst[-1]]==-1\nt = len(lst[0:2])==1\nprint(x, y, z, t)",
            "question": "What is the expected output of this code?",
            "answer": "True True True False",
            "distractor1": "True False True False",
            "distractor2": "True True False True",
            "distractor3": "True True False False",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 1,
            "tags": [
                "lists",
                "boolean expressions",
                "index",
                "indexing",
                "slicing",
                "boolean operators",
                "boolean expressions"
            ]
        },
        "pcep.3.1.10": {
            "code": "lst = [-1, -0.25, 0.5, 1.5]\n \nlst2 =  lst[0:5]\ny = lst[lst[0]]\n \nprint(lst2, end = \" || \")\nprint(y)",
            "question": "What is the expected output of this code?",
            "answer": "[-1, -0.25, 0.5, 1.5] || 1.5",
            "distractor1": "[-1, -0.25, 0.5, 1.5] || -1",
            "distractor2": "[-1, -0.25, 0.5, 1.5] || 0",
            "distractor3": "An unhandled exception occurred",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 1,
            "tags": [
                "lists",
                "slicing",
                "indexing",
                "input and output"
            ]
        },
        "pcep.3.1.11": {
            "code": "x = list('Election')\n\nprint( x[::-2] )",
            "question": "What is the expected output of this code?",
            "answer": "['n', 'i', 'c', 'l']",
            "distractor1": "['E', 'e', 't', 'o']",
            "distractor2": "['noitcelE']",
            "distractor3": "['n', 'o', 'i', 't', 'c', 'e', 'l', 'E']",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 1,
            "tags": [
                "lists",
                "slicing"
            ]
        },
        "pcep.3.1.12": {
            "code": "lst = ['Ana', 1, 4, 2, (6, 5), False]\ndel lst[-5:-3]\n \nprint(lst)",
            "question": "What is the expected output of this code?",
            "answer": "['Ana', 2, (6, 5), False]",
            "distractor1": "['Ana', 1, 4, 2, False]",
            "distractor2": "[1, 4, 2]",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 1,
            "tags": [
                "lists",
                "slicing"
            ]
        },
        "pcep.3.1.13": {
            "code": "lst = [3, 1, -1]\nlst[-2] = lst[1]\nprint(lst)",
            "question": "What is the expected output of this code?",
            "answer": "[3, 1, -1]",
            "distractor1": "False",
            "distractor2": "True",
            "distractor3": "[1]",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 1,
            "tags": [
                "lists",
                "indexing",
                "item assignment"
            ]
        },
        "pcep.3.1.14": {
            "code": "lst = [11, 42, 13]\nlst2 = lst[:]\nlst2.append(3)\nprint(lst[-1] + lst2[-1])",
            "question": "What is the expected output of this code?",
            "answer": "16",
            "distractor1": "26",
            "distractor2": "22",
            "distractor3": "84",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 1,
            "tags": [
                "lists",
                "append",
                "indexing",
                "slicing",
                "copying"
            ]
        },
        "pcep.3.1.15": {
            "code": "lst = [11, 42, 13]\nlst2 = lst\nlst2.append(3)\nprint(lst[-1] + lst2[-1])",
            "question": "What is the expected output of this code?",
            "answer": "6",
            "distractor1": "26",
            "distractor2": "16",
            "distractor3": "22",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 1,
            "tags": [
                "lists",
                "append",
                "indexing",
                "cloning"
            ]
        },
        "pcep.3.1.16": {
            "code": "lst = [41, 42]\n \nfor x in range(3):\n  lst.insert(-1, lst[x])\n \nprint(lst)",
            "question": "What is the expected output of this code?",
            "answer": "[41, 41, 41, 41, 42]",
            "distractor1": "[41, 42, 41, 42, 41]",
            "distractor2": "[42, 41, 41, 41, 41]",
            "distractor3": "[41, 41, 41, 42",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 1,
            "tags": [
                "lists",
                "insert",
                "for"
            ]
        },
        "pcep.3.1.17": {
            "code": "x = [False, True, \"42\", 3, 4, 5]\na=42 in x\nprint(a, end=\" \")\nb=0 in x\nprint(b)",
            "question": "What is the expected output of this code?",
            "answer": "False True",
            "distractor1": "True True",
            "distractor2": "False False",
            "distractor3": "True False",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 1,
            "tags": [
                "lists",
                "boolean operators",
                "boolean expressions",
                "input and output"
            ]
        },
        "pcep.3.1.18": {
            "code": "a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 42]\nprint(a[::-2])",
            "question": "What is the expected output of this code?",
            "answer": "[42, 10, 8, 6, 4, 2]",
            "distractor1": "[2, 4, 6, 8, 10, 42]",
            "distractor2": "[13]",
            "distractor3": "[13, 9, 7, 5, 3, 1]",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 1,
            "tags": [
                "lists",
                "slicing"
            ]
        },
        "pcep.3.1.19": {
            "code": "languages = ['English', 'Spanish', 'German']\nmore_languages = ['English', 'Spanish', 'German']\nextra_languages = more_languages\n\nx = more_languages == languages\ny = more_languages is languages\nprint(x, y)",
            "question": "What is the expected output of this code?",
            "answer": "True False",
            "distractor1": "True True",
            "distractor2": "False False",
            "distractor3": "False True",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 1,
            "tags": [
                "lists",
                "cloning",
                "boolean expressions"
            ]
        },
        "pcep.3.1.2": {
            "code": "def process(data):\n  data = [1,2,3]\n  return data[-2]\n\nmeasurements = [0 for i in range(3)]\nprocess(measurements)\nprint(measurements[-2])",
            "question": "What is the value printed?",
            "answer": "0",
            "distractor1": "1",
            "distractor2": "2",
            "distractor3": "Thiis code is erroneous",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 1,
            "tags": [
                "lists",
                "list comprehension",
                "indexing",
                "functions",
                "scope",
                "local",
                "global"
            ]
        },
        "pcep.3.1.20": {
            "code": "languages = ['English', 'Spanish', 'German']\nmore_languages = languages\nextra_languages = more_languages\n\nx = more_languages == languages\ny = more_languages is languages\nprint(x, y)",
            "question": "What is the expected output of this code?",
            "answer": "True True",
            "distractor1": "True False",
            "distractor2": "False True",
            "distractor3": "False False",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 1,
            "tags": [
                "lists",
                "cloning",
                "boolean expressions"
            ]
        },
        "pcep.3.1.3": {
            "code": "lst = [True, 3.14, -1]\nx=-1 in lst\ny= lst.index(-1) not in lst\nz = lst[lst[-1]]==-1\nt = len(lst[0:2])==1\nprint(x, y, z, t)",
            "question": "What is the expected output of this code?",
            "answer": "True True True False",
            "distractor1": "True True False True",
            "distractor2": "False True False True",
            "distractor3": "True False True False",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 1,
            "tags": [
                "lists",
                "boolean expressions",
                "index",
                "indexing",
                "slicing",
                "boolean expressions"
            ]
        },
        "pcep.3.1.4": {
            "code": "lst1 = [13, 17, 23, 42, 'a', False]\nlst2 = lst1[:]\nprint(lst1 is lst2)\nprint(lst1 == lst2)",
            "question": "What is the expected output of this code?",
            "answer": "False True",
            "distractor1": "False False",
            "distractor2": "True False",
            "distractor3": "True True",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 1,
            "tags": [
                "lists",
                "copying",
                "slicing",
                "boolean operators"
            ]
        },
        "pcep.3.1.5": {
            "code": "list=[[1, 2, 3, 4]]\nresult=1\n \nfor i in range(1):\n  result *=10\n  for j in range(1):\n    list[i][j]*=result\n      \nprint(list)",
            "question": "What is the expected output of this code?",
            "answer": "[[10, 2, 3, 4]]",
            "distractor1": "[[1, 20, 3, 4]]",
            "distractor2": "[1, 2, 3, 4]",
            "distractor3": "[[10, 20, 30, 40]]",
            "description": "\ud83d\udca1 Code iterates over a nested list, starting with initializing `result` to 1. <br><br>\ud83d\udca1 Outer loop runs once, multiplying `result` by 10 each time.<br><br>\ud83d\udca1 Inner loop modifies first element, multiplying 1 by 10, resulting in [[10, 2, 3, 4]].<br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 1,
            "tags": [
                "lists",
                "nested lists",
                "indexing",
                "for"
            ]
        },
        "pcep.3.1.6": {
            "code": "lst1 = [1,2,3]\nlst2 = lst1\n\nprint(lst1 is lst2)",
            "question": "What is the expected output of this code?",
            "answer": "True",
            "distractor1": "False",
            "distractor2": "[1,2,3] [1,2,3]",
            "distractor3": "FALSE",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 1,
            "tags": [
                "lists",
                "boolean operators",
                "cloning"
            ]
        },
        "pcep.3.1.7": {
            "code": "data = [1, 2, 'a', None, (), [], ]\nprint(len(data))",
            "question": "What is the expected output of this code?",
            "answer": "6",
            "distractor1": "5",
            "distractor2": "7",
            "distractor3": "3",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 1,
            "tags": [
                "lists",
                "len"
            ]
        },
        "pcep.3.1.8": {
            "code": "lst = [x for x in range(5)]\nprint(lst)",
            "question": "What is the expected output of this code?",
            "answer": "[0,1,2,3,4]",
            "distractor1": "[1,2,3,4,5]",
            "distractor2": "[1,2,3,4]",
            "distractor3": "['x', 'x', 'x', 'x', 'x']",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 1,
            "tags": [
                "lists",
                "list comprehensions"
            ]
        },
        "pcep.3.1.9": {
            "code": "x = [False, True, True, False, True]\ny = x[:]\ni = 0\n\nfor j in y[2:]:\n  if j:\n    i +=1\n      \nprint(i)",
            "question": "What is the expected output of this code?",
            "answer": "2",
            "distractor1": "3",
            "distractor2": "0",
            "distractor3": "1",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 1,
            "tags": [
                "lists",
                "slicing",
                "copying",
                "for",
                "if"
            ]
        },
        "pcep.3.2.1": {
            "code": "x = '1', '2'\ny = ('3', '4')\nprint(x + y)",
            "question": "What is the expected output of this code?",
            "answer": "('1', '2', '3', '4')",
            "distractor1": "10",
            "distractor2": "('1', '2')('3', '4')",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 2,
            "tags": [
                "tuples",
                "concatenation"
            ]
        },
        "pcep.3.2.2": {
            "code": "tup = (1, ) + (2, ) + (3,)\n\ntup = tup + tup\n\nprint(len(tup))",
            "question": "What is the expected output of this code?",
            "answer": "6",
            "distractor1": "(1, 2, 3, 1, 2, 3)",
            "distractor2": "3",
            "distractor3": "(1, 2, 3)",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 2,
            "tags": [
                "tuples",
                "concatenation"
            ]
        },
        "pcep.3.2.3": {
            "code": "data = (1, 2, 8, 16)\ndata = data[-2:-1]\ndata = data[-1]\nprint(data)",
            "question": "What is the expected output of this code?",
            "answer": "8",
            "distractor1": "(8, 16)",
            "distractor2": "16",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 2,
            "tags": [
                "tuples",
                "slicing",
                "indexing"
            ]
        },
        "pcep.3.2.4": {
            "code": "x = (1, 2)\ny = ('x', 'y', 42)\nz = x + y * 2\nprint(z)",
            "question": "What is the expected output of this code?",
            "answer": "(1, 2, 'x', 'y', 42, 'x', 'y', 42)",
            "distractor1": "(1, 2, 'x', 'y', 84)",
            "distractor2": "(1, 2, 'x', 'y', 42, 1, 2, 'x', 'y', 42)",
            "distractor3": "This code raises a TypeError",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 2,
            "tags": [
                "tuples",
                "concatenation"
            ]
        },
        "pcep.3.3.1": {
            "code": "colors = {\"Red\": 155, \"Green\": 209, \"Blue\": 77}\n\nfor color in colors:\n  print(color[0], end=\"\")",
            "question": "What is the expected output of this code?",
            "answer": "RGB",
            "distractor1": "127",
            "distractor2": "RedGreenBlue",
            "distractor3": "15520977",
            "description": "\ud83d\udca1 Looping through a dictionary like this sets the iterator variable to the key each time.<br><br>\ud83d\udca1 That means \"color\" is the key in each iteration (i.e., Red, Green, Blue.<br><br>\ud83d\udca1 The print statement printing the value at the first index ([0]) each time, thus \"RGB\"<br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 3,
            "tags": [
                "dictionaries",
                "for",
                "indexing",
                "strings",
                "input and output"
            ]
        },
        "pcep.3.3.2": {
            "code": "dict1 = {7: 'Java', 4: 'JavaScript', 3: 'Python', 1:\"C#\"}\n \ndict2 = dict1\ndel dict1\n \nprint(dict2)",
            "question": "What is the expected output of this code?",
            "answer": "{7: 'Java', 4: 'JavaScript', 3: 'Python', 1: 'C#'}",
            "distractor1": "{}",
            "distractor2": "{7: 'Java', 4: 'JavaScript', 3: 'Python'}",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 The expression on line 2 is \"cloning\" dict1.  This means that the variables dict1 and dict2 point at the same dictionary object.<br><br>\ud83d\udca1 On line 4, del dict1 is deleting the reference to the object, not the object itself.<br><br>\ud83d\udca1 If the del keyword is applied to a specific object inside a mutable object, then it will alter the object.<br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 3,
            "tags": [
                "dictionaries",
                "cloning",
                "del"
            ]
        },
        "pcep.3.3.3": {
            "code": "d={\"one\":\"two\", \"two\":\"None\"}\nkey=\"one\"\nkey=d[key]\nkey=d[key]\nprint(key)",
            "question": "What is the expected output of this code?",
            "answer": "None",
            "distractor1": "one",
            "distractor2": "two",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 3,
            "tags": [
                "dictionaries",
                "indexing"
            ]
        },
        "pcep.3.3.4": {
            "code": "animals = {'Tom': 10, 'Jerry': 20}\nprint(animals[20])",
            "question": "What is the expected output of this code?",
            "answer": "This code raises KeyError",
            "distractor1": "This code raises IndexError",
            "distractor2": "This code raises ValueError",
            "distractor3": "Jerry",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 3,
            "tags": [
                "dictionaries",
                "Exceptions",
                "KeyError"
            ]
        },
        "pcep.3.3.5": {
            "code": "dic = {'one': 1, 'two': 7, 'three': 3}\n \ndic['two'] = 4\ndic[7] = 'seven'\n   \nprint(dic)",
            "question": "What is the expected output of this code?",
            "answer": "{'one': 1, 'two': 4, 'three': 3, 7: 'seven'}",
            "distractor1": "{'one': 1, 'two': 7, 'three': 3}",
            "distractor2": "{'one': 1, 'two': 7, 'three': 3, 4: 'four'}",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 3,
            "tags": [
                "dictionaries",
                "item assignment"
            ]
        },
        "pcep.3.4.1": {
            "code": "string1 = 'Petrol'\nstring2 = string1[0] + string1[-4] * len(string1)\nprint(string2)",
            "question": "What is the expected output of this code?",
            "answer": "Ptttttt",
            "distractor1": "Petrol",
            "distractor2": "Poooooo",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 4,
            "tags": [
                "strings",
                "concatenation",
                "indexing",
                "len"
            ]
        },
        "pcep.3.4.2": {
            "code": "d = {}\nd[1] = 7\nd['1'] = 8\nd[1] -= 4\n \ns = 0\n \nfor i in d:\n  s += d[i]\n \nprint(s)",
            "question": "What is the expected output of this code?",
            "answer": "11",
            "distractor1": "10",
            "distractor2": "12",
            "distractor3": "9",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 4,
            "tags": [
                "dictionaries",
                "indexing",
                "for",
                "item assignment"
            ]
        },
        "pcep.3.4.3": {
            "code": "data = {}\ndata[0] = 'Math'\ndata['Languages'] = ['English', 'Serbian']\nprint(data)",
            "question": "What is the expected output of this code?",
            "answer": "{0: 'Math', 'Languages': ['English', 'Serbian']}",
            "distractor1": "'Math'",
            "distractor2": "['English, 'Serbian']",
            "distractor3": "This code rises an exception as dictionaries are immutable.",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 3,
            "objective": 4,
            "tags": [
                "dictionaries",
                "item assignment"
            ]
        },
        "pcep.4.1.1": {
            "code": "def walk(stop, start=1):\n  print(start, end=\" \")\n  if start + 1 < stop:\n    walk(stop, start + 1)\n    \nwalk(3)",
            "question": "What will be printed?",
            "answer": "1 2",
            "distractor1": "1 2 3",
            "distractor2": "2 3",
            "distractor3": "0 1 2 3",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 1,
            "tags": [
                "functions",
                "recursion",
                "default parameters",
                "keyword",
                "boolean expressions",
                "input and output"
            ]
        },
        "pcep.4.1.10": {
            "code": "def test(x):\n  return 42 if x % 3 != 0 else 13\n \nprint(test(test(100)))",
            "question": "What is the expected output of this code?",
            "answer": "13",
            "distractor1": "42",
            "distractor2": "1",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 test(test(100)) is equivalent to test(42).<br><br>\ud83d\udca1 test(42) is 13 because the remainder of 42/3 is 0.<br><br>\ud83d\udca1 When you have nested function calls like this, start on the inside and work outward.<br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 1,
            "tags": [
                "functions",
                "return",
                "if",
                "boolean expressions"
            ]
        },
        "pcep.4.1.11": {
            "code": "def f(x):\n  if x == 0:\n    return 1\n  return x + f(x-1)\n   \nprint(f(4))",
            "question": "What is the expected output of this code?",
            "answer": "11",
            "distractor1": "10",
            "distractor2": "12",
            "distractor3": "24",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 1,
            "tags": [
                "functions",
                "return",
                "if",
                "recursion"
            ]
        },
        "pcep.4.1.12": {
            "code": "def change(a, b):\n  a, b = b, a\n \na = 13\nb = 42\nchange(a, b)\nprint(a, b)",
            "question": "What is the expected output of this code?",
            "answer": "13 42",
            "distractor1": "42 13",
            "distractor2": "13 13",
            "distractor3": "42 42",
            "description": "\ud83d\udca1 The result is 13 42 becuase the values of a and b are not changed in the function.<br><br>\ud83d\udca1 The a and b referred to in the function definition are local to that function.<br><br>\ud83d\udca1 If the function included the expression \"global a, b\", then the global a and b variables would have been changed.<br><br>\ud83d\udca1  This question is about scope - local vs. global.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 1,
            "tags": [
                "functions",
                "scope"
            ]
        },
        "pcep.4.1.13": {
            "code": "def fun():\n  ???\n  x *= 2\n\nx = 6\nfun()\nprint(x)",
            "question": "Which expression is needed for ??? so that this code prints 12?",
            "answer": "global x",
            "distractor1": "x = 6",
            "distractor2": "x == 6",
            "distractor3": "return x",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 1,
            "tags": [
                "functions",
                "scope",
                "global"
            ]
        },
        "pcep.4.1.14": {
            "code": "x = 17\n \ndef f():\n  if x >= 10:\n    x += 10\n\nf()\nprint(x)",
            "question": "What is the expected output of this code?",
            "answer": "This code is erroneous",
            "distractor1": "27",
            "distractor2": "17",
            "distractor3": "7",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 1,
            "tags": [
                "functions",
                "scope",
                "if",
                "boolean expressions"
            ]
        },
        "pcep.4.1.15": {
            "code": "def f(x):\n  if x % 2 == 0:\n    return 1\n  else:\n    return\n \nprint(f(f(2)) + 11)",
            "question": "What is the expected output of this code?",
            "answer": "TypeError",
            "distractor1": "ValueError",
            "distractor2": "13",
            "distractor3": "11",
            "description": "\ud83d\udca1 This function raises a TypeError<br><br>\ud83d\udca1 f(f(2)) simplifies to f(1) since 2%2==0 is True.<br><br>\ud83d\udca1 F(1) simplifies to None because 1%2==0 is False, thus the function returns None (\"return\" alone returns None)<br><br>\ud83d\udca1 The TypeError occurs because the argument in the print function becomes None + 11.  You can't add an integer and a None type.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 1,
            "tags": [
                "functions",
                "return",
                "TypeError",
                "nested function call",
                "boolean expressions",
                "exceptions"
            ]
        },
        "pcep.4.1.16": {
            "code": "data = [1, 2, 3, 4, 5]\n \ndef test(x):\n  del x[0]\n  x.pop(2)\n \ntest(data)\nprint(data) ",
            "question": "What is the expected output of this code?",
            "answer": "[2, 3, 5]",
            "distractor1": "[3, 4, 5]",
            "distractor2": "[1, 2, 3, 4, 5]",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 1,
            "tags": [
                "functions",
                "lists",
                "pop",
                "del"
            ]
        },
        "pcep.4.1.17": {
            "code": "def func(a):\n  a[3]='shark'\n \nx = ['cat', 'dog', 'mouse', 'cow']\nfunc(x)\nprint(x)",
            "question": "What is the expected output of this code?",
            "answer": "['cat', 'dog', 'mouse', 'shark']",
            "distractor1": "['cat', 'dog', 'mouse', 'cow']",
            "distractor2": "['shark']",
            "distractor3": "['cat', 'dog', 'mouse', 'cow', 'shark']",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 1,
            "tags": [
                "functions",
                "lists",
                "scope",
                "mutability"
            ]
        },
        "pcep.4.1.2": {
            "code": "def sample(value):\n  return value + value\n\nx = sample(value=1)\ny = sample(x)\nprint(y)",
            "question": "What is the expected output?",
            "answer": "4",
            "distractor1": "2",
            "distractor2": "1",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 1,
            "tags": [
                "functions",
                "return"
            ]
        },
        "pcep.4.1.3": {
            "code": "def combine(width, height=2, depth=0, is_3D=False):\n  return (is_3D, width, height, depth)\n\nprint(combine(1)[2])",
            "question": "What is the result of this code?",
            "answer": "2",
            "distractor1": "1",
            "distractor2": "False",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 First evaluate combine(1) --> the 1 is the \"width\" argument --> (False, 1, 2, 0) is returned.<br><br>\ud83d\udca1 Then evaluate combine(1)[2] which is the item in the return from step 1 at index position 2<br><br>\ud83d\udca1 The item in index position 2 is the 2 (the height variable that was part of the returned tuple).<br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 1,
            "tags": [
                "functions",
                "keyword",
                "tuples",
                "indexing",
                "return",
                "default parameters"
            ]
        },
        "pcep.4.1.4": {
            "code": "def f(x):\n    return x ** 3 - 24\n\nprint(f(f(f(3))))",
            "question": "What is the expected output of this code?",
            "answer": "3",
            "distractor1": "0",
            "distractor2": "24",
            "distractor3": "15",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 1,
            "tags": [
                "functions",
                "return",
                "nested function calls"
            ]
        },
        "pcep.4.1.5": {
            "code": "x=123\n\ndef f(y):\n  sum=0\n  while (y!=0):\n    sum+=int(y%10)\n    y=int(y/10)\n  print(sum)\n  \nf(x)",
            "question": "What is the expected output of this code?",
            "answer": "6",
            "distractor1": "5",
            "distractor2": "4",
            "distractor3": "0",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 1,
            "tags": [
                "functions",
                "while",
                "boolean expressions"
            ]
        },
        "pcep.4.1.6": {
            "code": "def test():\n  x = 'Pink Floyd'\n  print(x)\n \nx = 'Led Zeppelin'\ntest()",
            "question": "What is the expected output of this code?",
            "answer": "Pink Floyd",
            "distractor1": "Led Zeppelin",
            "distractor2": "x",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 1,
            "tags": [
                "functions"
            ]
        },
        "pcep.4.1.7": {
            "code": "def t(y):\n  global x\n  x += y    \n \nx = 12\nt(3)\nprint(x)",
            "question": "What is the expected output of this code?",
            "answer": "15",
            "distractor1": "12",
            "distractor2": "3",
            "distractor3": "9",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 1,
            "tags": [
                "functions",
                "scope",
                "global"
            ]
        },
        "pcep.4.1.8": {
            "code": "def f(x):\n  res = '*'\n  for _ in range(x):\n    res += res\n  return res\n \nfor x in f(3):\n  print(x, end='-')",
            "question": "What is the expected output of this code?",
            "answer": "*-*-*-*-*-*-*-*-",
            "distractor1": "********",
            "distractor2": "*-*-*-",
            "distractor3": "*-*-*-*-*-*-",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 1,
            "tags": [
                "functions",
                "for",
                "input and output"
            ]
        },
        "pcep.4.1.9": {
            "code": "def average_of_evens(numbers):\n    total = 0\n    count = 0\n    for num in numbers:\n        if num % 2 == 0:\n            total += num\n            count += 1\n    if count == 0:\n        return None\n    else:\n        return total / count\n \nprint(average_of_evens([1,2,3,4]))",
            "question": "What is the expected output of this code?",
            "answer": "3.0",
            "distractor1": "5",
            "distractor2": "3.5",
            "distractor3": "3",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 1,
            "tags": [
                "functions",
                "return",
                "for",
                "if",
                "lists",
                "boolean expressions"
            ]
        },
        "pcep.4.2.1": {
            "code": "str = \"Hello\"\ndef f():\n    global str\n    str=str*2\n    print(str, end=\" \")\n\nf()\nprint(str)",
            "question": "What is the expected output of this code?",
            "answer": "HelloHello HelloHello",
            "distractor1": "Hello",
            "distractor2": "HelloHello",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 2,
            "tags": [
                "functions",
                "scope",
                "global",
                "input and output"
            ]
        },
        "pcep.4.2.2": {
            "code": "msg = \"Hello\"\ndef f(msg):\n    msg=msg*2\n    print(msg, end=\" \")\n\nf(\"Goodbye\")\nprint(msg)",
            "question": "What is the expected output of this code?",
            "answer": "GoodbyeGoodbye Hello",
            "distractor1": "HelloHello Hello",
            "distractor2": "HelloHello HelloHello",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 2,
            "tags": [
                "functions",
                "scope",
                "input and output"
            ]
        },
        "pcep.4.2.3": {
            "code": "msg = \"Hello\"\ndef f():\n    msg=msg*2\n    print(msg, end=\" \")\n\nf()\nprint(msg)",
            "question": "What is the expected output of this code?",
            "answer": "This code is Erroneous",
            "distractor1": "HelloHello Hello",
            "distractor2": "HelloHello HelloHello",
            "distractor3": "msg",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 2,
            "tags": [
                "functions",
                "scope",
                "input and output"
            ]
        },
        "pcep.4.2.4": {
            "code": "x = 13\n\ndef change():\n    global x\n    print(x, end=\" \")\n    x = 42\n    print(x, end=\" \")\n\nchange()\nprint(x)",
            "question": "What is the expected output of this code?",
            "answer": "13 42 42",
            "distractor1": "13 13 42",
            "distractor2": "13 42 13",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 2,
            "tags": [
                "functions",
                "global",
                "scope"
            ]
        },
        "pcep.4.2.5": {
            "code": "def f(x=2, y=2):\n  return x ** y-3\n \nprint(f(y=3))",
            "question": "What is the expected output of this code?",
            "answer": "5",
            "distractor1": "1",
            "distractor2": "0",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 2,
            "tags": [
                "functions",
                "return",
                "keyword",
                "default parameter values"
            ]
        },
        "pcep.4.2.6": {
            "code": "def f(x):\n  x=['a', 'b', 'c', 'd', 'e']\n  print(x, end=\" \")\n \nx=['p','q','r']\nf(x)\nprint(x)",
            "question": "What is the expected output of this code?",
            "answer": "['a', 'b', 'c', 'd', 'e'] ['p', 'q', 'r']",
            "distractor1": "['p','q', 'r'] ['p', 'q', 'r']",
            "distractor2": "['a', 'b', 'c', 'd', 'e'] ['a', 'b', 'c', 'd', 'e']",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 2,
            "tags": [
                "functions",
                "lists",
                "scope",
                "input and output"
            ]
        },
        "pcep.4.2.7": {
            "code": "def funct(x=13, y=42, z=0):\n  x = x + y + z\n  y -= 11\n  z +=10\n  print(x, y, z)\n \nfunct(3, 2, 1)",
            "question": "What is the expected output of this code?",
            "answer": "6 -9 11",
            "distractor1": "55 31 10",
            "distractor2": "6 13 11",
            "distractor3": "16 31 10",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 2,
            "tags": [
                "functions",
                "default parameters",
                "keyword arguments"
            ]
        },
        "pcep.4.2.8": {
            "code": "def test(a, b, c=0, d=4):\n    pass",
            "question": "Which of the following will call the test function without error?",
            "answer": "test(b=4, a=6)",
            "distractor1": "test()",
            "distractor2": "test(a=6, c=2, d=4)",
            "distractor3": "test(3, c=3)",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 2,
            "tags": [
                "functions",
                "keyword",
                "defaut parameter values"
            ]
        },
        "pcep.4.3.1": {
            "code": "my_list = [9, 15, 8, 15]\n\nmy_list.insert(2, 6)\ninsert.my_list(3, 2)\ny_list[2] = 6\ny_list.insert(4, 3)\n\nprint(my_list)",
            "question": "What is the expected output of this code?",
            "answer": "This code raises a NameError",
            "distractor1": "[9, 15, 6, 2, 3, 8, 15]",
            "distractor2": "This code raises an IndexError",
            "distractor3": "[9, 15, 8, 15]",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 3,
            "tags": [
                "lists",
                "insert",
                "NameError"
            ]
        },
        "pcep.4.3.10": {
            "code": "try:\n    result = 10 / \"0\"\n\nexcept ZeroDivisionError as ze:\n    print(\"Handled ZeroDivisionError:\", ze)\n\nexcept ValueError as ve:\n    print(\"Handled ValueError:\", ve)\n\nexcept TypeError as te:\n    print(\"Handled TypeError:\", te)\n    \nexcept:\n    print(\"An unexpected error occurred\")",
            "question": "Which exception branch will handle this error?",
            "answer": "TypeError",
            "distractor1": "ZeroDivisionError",
            "distractor2": "ValueError",
            "distractor3": "abstract except",
            "description": "\ud83d\udca1 On line 2, dividing 10 by a string will raise a TypeError<br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 3,
            "tags": [
                "exceptions",
                "exception hierarchy",
                "TypeError"
            ]
        },
        "pcep.4.3.11": {
            "code": "try:\n    result = float(\"zero\")\n\nexcept ArithmeticError as ze:\n    print(\"Handled ZeroDivisionError:\", ze)\n\nexcept ValueError as ve:\n    print(\"Handled ValueError:\", ve)\n\nexcept TypeError as te:\n    print(\"Handled TypeError:\", te)\n    \nexcept:\n\tprint(\"Unexpected Error\")",
            "question": "Which exception branch will handle this error?",
            "answer": "ValueError",
            "distractor1": "ArithmeticError",
            "distractor2": "TypeError",
            "distractor3": "abstract except",
            "description": "\ud83d\udca1 On line 2, passing a string with non-digits is inappropriate for the float() function, this raises a ValueError.<br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 3,
            "tags": [
                "exceptions",
                "exception hierarchy",
                "ValueError"
            ]
        },
        "pcep.4.3.12": {
            "code": "try:\n    x = [4,9,3]\n    y = x[3] * 2\n\nexcept KeyError as ke:\n    print(\"KeyError:\", ke)\n\nexcept IndexError as ie:\n    print(\"IndexError:\", ie)\n\nexcept LookupError as le:\n    print(\"LookuError:\", le)\n\nexcept:\n    print(\"An unexpected error has occurred\")",
            "question": "Which exception branch will handle this error?",
            "answer": "IndexError",
            "distractor1": "KeyError",
            "distractor2": "LookupError",
            "distractor3": "abstract exception",
            "description": "\ud83d\udca1 On line 3, the equation attempts to access the list x at index 3; however, x only has indexes 0, 1, 2 - an IndexError is raised.<br><br>\ud83d\udca1 Remember, errors indexing lists, tuples, and strings raises an IndexError.  Alternatively, errors accessing incorrect keys in dictionaries will raise a KeyError<br><br>\ud83d\udca1 Both KeyError and IndexError are subclasses of LookupError.<br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 3,
            "tags": [
                "exceptions",
                "exception hierarchy",
                "IndexError"
            ]
        },
        "pcep.4.3.13": {
            "code": "try:\n    x = {\"Spring\": 66, \"Summer\": 94}\n    y = x[\"Winter\"] * 2\n\nexcept KeyError as ke:\n    print(\"KeyError:\", ke)\n\nexcept IndexError as ie:\n    print(\"IndexError:\", ie)\n\nexcept LookupError as le:\n    print(\"LookuError:\", le)\n\nexcept:\n    print(\"An unexpected error has occurred\")",
            "question": "Which exception branch will handle this error?",
            "answer": "KeyError",
            "distractor1": "IndexError",
            "distractor2": "LookupError",
            "distractor3": "abstract except",
            "description": "\ud83d\udca1 The error is occurring on line 3 - there no key \"Winter\" in the dictionary named \"x\".<br><br>\ud83d\udca1 As a result, this line raises a KeyError and will be handled on lines 5 and 6.<br><br>\ud83d\udca1 KeyError is a subclass of LookupError - if the KeyError handler was not present, then the LookupError would have handled it.<br><br>\ud83d\udca1 IndexError is raised when using an improper index with a list, tuple, or string.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 3,
            "tags": [
                "exceptions",
                "exception hierarchy",
                "KeyError"
            ]
        },
        "pcep.4.3.14": {
            "code": "try:\n    x = {\"Spring\": 66, \"Summer\": 94}\n    y = x[\"Winter\"] * 2\n\nexcept LookupError as le:\n    print(\"LookupError:\", le)\n\nexcept KeyError as ke:\n    print(\"KeyError:\", ke)\n\nexcept IndexError as ie:\n    print(\"IndexError:\", ie)\n\nexcept:\n    print(\"An unexpected error has occurred\")",
            "question": "Which exception branch will handle this error?",
            "answer": "LookupError",
            "distractor1": "KeyError",
            "distractor2": "IndexError",
            "distractor3": "abstract except",
            "description": "\ud83d\udca1 A KeyError is raised on line 3.  Since KeyError is a subclass of LookupError, this exception is handled on line 5/6 since it appears before KeyError<br><br>\ud83d\udca1 Remember, the first matching exception branch will handle the error.<br><br>\ud83d\udca1 This exception handling is not optimal since a more general branch (LookupError) precedes a more specific branch (KeyError, IndexError.  The LookupError branch is not needed in this code.<br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 3,
            "tags": [
                "exceptions",
                "exception hierarchy",
                "LookupError"
            ]
        },
        "pcep.4.3.2": {
            "code": "try:\n  print(42/0) \nexcept (ZeroDivisionError):\n  print(\"Zero division\")\nexcept: \n  print(\"You made a mistake\")\nexcept (ValueError):\n  print(\"Boo!\")",
            "question": "What is the expected output of this code?",
            "answer": "This code raises an unhandled exception",
            "distractor1": "Zero division",
            "distractor2": "Boo!",
            "distractor3": "You made a mistake",
            "description": "\ud83d\udca1 Because the abstract \"except\" branch is not last, this code raises an unhandled SyntaxError.<br><br>\ud83d\udca1 Beware of this type of question on the exam - the \"except\" must come last.<br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 3,
            "tags": [
                "exceptions",
                "abstract except"
            ]
        },
        "pcep.4.3.3": {
            "code": "answer1 = issubclass(ValueError, Exception)\n\nanswer2 = issubclass(Exception, BaseException)\n\nprint(answer1, answer2)",
            "question": "Is ValueError a subclass of Exception?  And, is Exception a subclass of BaseException?",
            "answer": "True True",
            "distractor1": "True False",
            "distractor2": "False True",
            "distractor3": "False False",
            "description": "\ud83d\udca1 All concrete exceptions are a subclass of Exception.<br><br>\ud83d\udca1 All exceptions, including Exception are subclasses of BaseException.<br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 0.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 3,
            "tags": [
                "exceptions",
                "exception hierarchy"
            ]
        },
        "pcep.4.3.4": {
            "code": "import sys\n\nx = 100\n\ntry:\n  if x >= 100:\n    sys.exit()\n    \nexcept SystemExit as e:\n  print(\"sys.exit has been invoked\")",
            "question": "When a program is terminated using sys.exit(), a SystemExit exception is raised, true or false?",
            "answer": "True",
            "distractor1": "False",
            "distractor2": "n/a",
            "distractor3": "n/a",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 3,
            "tags": [
                "exceptions",
                "SystemExit"
            ]
        },
        "pcep.4.3.5": {
            "code": "import time\n\ntry:\n    while True:\n        print(\"Running... Press Ctrl+C to stop.\")\n        time.sleep(1)\n        \nexcept KeyboardInterrupt:\n    print(\"\\nProgram was interrupted by the user. Exiting gracefully.\")\n",
            "question": "This code creates an infinite loop. If the user interrupts the program using Ctrl+C, it will raise a KeyboardInterrupt exception, true or false?",
            "answer": "True",
            "distractor1": "False",
            "distractor2": "n/a",
            "distractor3": "n/a",
            "description": "\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 3,
            "tags": [
                "exceptions",
                "KeyboardInterrupt"
            ]
        },
        "pcep.4.3.6": {
            "code": "try:\n  x = int(input(\"Enter a number\"))\n  \nexcept TypeError:\n  print(\"A type error has occurred\")\n  \nexcept:\n  print(\"An abstract error has occurred\")",
            "question": "Assuming the user input the letter \"p\", what is the output of this code?",
            "answer": "An abstract error has occurred",
            "distractor1": "A type error has occurred",
            "distractor2": "An unhandled exception will occur",
            "distractor3": "p",
            "description": "\ud83d\udca1 Line 2 raises a ValueError since a non-digit string is inappropriate for the int() function.<br><br>\ud83d\udca1 There is no specific ValueError branch, so this is handled by the abstract \"except\" branch.<br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 3,
            "tags": [
                "exceptions",
                "abstract exceptions"
            ]
        },
        "pcep.4.3.7": {
            "code": "try:\n    result = 10 / 0\n    \nexcept ArithmeticError as ae:\n    print(\"Handled ArithmeticError:\", ae)\n    \nexcept ValueError as ve:\n    print(\"Handled ValueError:\", ve)\n    \nexcept TypeError as te:\n    print(\"Handled TypeError:\", te)\n    \nexcept:\n    print(\"An unexpected error occurred\")",
            "question": "Which exception will handle this error?",
            "answer": "ArithmeticError",
            "distractor1": "ValueError",
            "distractor2": "TypeError",
            "distractor3": "abstract exception",
            "description": "\ud83d\udca1 Line 2 will raise a ZeroDivisionError<br><br>\ud83d\udca1 Since there is no specific ZeroDivisionError branch, it will be handed by ArithmeticError.<br><br>\ud83d\udca1 ZeroDivisionError is a subclass of ArithmeticError.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 3,
            "tags": [
                "exceptions",
                "exception hierarchy",
                "ArithmeticError"
            ]
        },
        "pcep.4.3.9": {
            "code": "try:\n    result = 10 / 0\n    \nexcept ZeroDivisionError as ze:\n    print(\"Handled ZeroDivisionError:\", ze)\n    \nexcept ValueError as ve:\n    print(\"Handled ValueError:\", ve)\n    \nexcept TypeError as te:\n    print(\"Handled TypeError:\", te)\n    \nexcept:\n    print(\"An unexpected error occurred\")",
            "question": "Which exception branch will handle this error?",
            "answer": "ZeroDivisionError",
            "distractor1": "ValueError",
            "distractor2": "TypeError",
            "distractor3": "abstract exception",
            "description": "\ud83d\udca1 Line 2 raises a ZeroDivisionError, which is handled by the ZeroDivisionError branch on line 7/8.<br><br>\ud83d\udca1 <br><br>\ud83d\udca1 <br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 4,
            "objective": 3,
            "tags": [
                "excpetions",
                "exception hierarchy",
                "ZeroDivisionError"
            ]
        },
        "pcap.1.3.6": {
            "code": "import ???\n\nnums = [1,2,3,4,5,6,7,8,9]\n\nprint(???.choice(nums))",
            "question": "What module needs to be imported for this code to work?",
            "answer": "random",
            "distractor1": "math",
            "distractor2": "platform",
            "distractor3": "numpy",
            "description": "\ud83d\udca1 The answer is the random module.<br><br>\ud83d\udca1 The choice function will randomly choose an element from a collection<br><br>\ud83d\udca1 When imported like this \"import random\", you must use dot-notation to use the function --> print(random.choice(nums))<br><br> \ud83d\udca1 Fill in the ? and try the code.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 1.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 3,
            "tags": [
                "import variants",
                "random",
                "choice()"
            ]
        },
        "pcap.1.4.2": {
            "code": "import platform\n\nprint(platform.platform())",
            "question": "What will the output of this code be?",
            "answer": "The name of the operating system, version and service pack number",
            "distractor1": "The the type of CPU",
            "distractor2": "The architecture of the computer",
            "distractor3": "The name of the operating system only",
            "description": "\ud83d\udca1 The platform function from the platform module returns detailed information about he operating system including name, version and service pack.<br><br> \ud83d\udca1 The other platform function related to operating system is the system function which simply returns the name of the os.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 4,
            "tags": [
                "modules & packages",
                "platform"
            ]
        },
        "pcap.1.4.3": {
            "code": "import platform\n\nprint(platform.???)\n\n",
            "question": "What function from the platform module will return the system architecture?",
            "answer": "machine()",
            "distractor1": "system()",
            "distractor2": "cpu()",
            "distractor3": "version()",
            "description": "\ud83d\udca1 The system architecture is returned by the machine() function.<br><br>\ud83d\udca1 system() returns the name of the os, version() returns the os version.<br><br>\ud83d\udca1 There is no cpu() function in the platform module.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 4,
            "tags": [
                "modules & packages",
                "platform"
            ]
        },
        "pcap.1.2.5": {
            "code": "from math import floor, ceil\n\nx = ceil(5.4) - floor(-3.6)\n\nprint(x)",
            "question": "What is the output of this code?",
            "answer": "10",
            "distractor1": "8",
            "distractor2": "9",
            "distractor3": "This code raises an unhandled exception",
            "description": "\ud83d\udca1 Break the equation down as follows:  ceil(5.4) is 6 and floor(-3.6) is -4.<br><br>\ud83d\udca1 So your can rewrite the equation as x = 6 - (-4) which is the same as 6 + 4 which equals 10.<br><br>\ud83d\udca1 When using ceil and floor - think of the numbers on a number line, ceil will always bump the number to the right and floor will bump the number to the left.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 2,
            "tags": [
                "import variants",
                "math",
                "ceil()",
                "floor()"
            ]
        },
        "pcap.1.5.1": {
            "code": "",
            "question": "The directory where Python stores semi-compiled code of imported modules is called ...",
            "answer": "__pycache__",
            "distractor1": "__init__",
            "distractor2": "__pyc__",
            "distractor3": ".pyc",
            "description": "\ud83d\udca1 Python stores semi-compiled module code in the __pycache__ directory.<br><br> \ud83d\udca1 Python creates this directory automatically and stores the semi-compiled module with the extension .pyc.<br><br>\ud83d\udca1 Files names are created automatically in the form of <module_name>-<Python Implementation>.<Python Version>.pyc for example my_module.cpython-310.pyc (module name is \"my module\", cpython is the implementation, and the version is 3.10.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 0.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 5,
            "tags": [
                "modules & packages"
            ]
        },
        "pcap.1.5.2": {
            "code": "",
            "question": "The file that marks a directory as a Python package is called ...",
            "answer": "__init__.py",
            "distractor1": "__init__",
            "distractor2": "__pycache__",
            "distractor3": "__dict__",
            "description": "\ud83d\udca1 The __init__.py is a file that is used to mark a directory as a Python package.<br><br>\ud83d\udca1 It can also be used to execute initialization code or define what is accessible when the package is imported.<br><br>\ud83d\udca1 In Python versions prior to 3.3 it was required.  It is still common practice to use even in later versions of Python.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 5,
            "tags": [
                ""
            ]
        },
        "pcap.2.1.1": {
            "code": "try:\n    print(5/0)\nexcept:\n    print(\"Sorry, something went wrong...\")\nexcept (ValueError, ZeroDivisionError):\n    print(\"Too bad...\")",
            "question": "What is the expected outcome of this code?",
            "answer": "SyntaxError",
            "distractor1": "\"Sorry, something went wrong...\"",
            "distractor2": "\"To bad...\"",
            "distractor3": "5",
            "description": "\ud83d\udca1 This code raises a SyntaxError.<br><br>\ud83d\udca1 When unnamed \"except\" branch is used, it must be the last exception branch.<br><br>\ud83d\udca1 There will be tricky questions on the PCAP like this.  If SyntaxError is an answer choice, then specifically look for this situation.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 2,
            "objective": 1,
            "tags": [
                "exceptions"
            ]
        },
        "pcap.2.1.2": {
            "code": "try:\n    print(5/0)\n    break\n\nexcept (ValueError, ZeroDivisionError):\n    print(\"Too bad...\")\n    \nexcept:\n    print(\"Sorry, something went wrong...\")",
            "question": "What is the expected output of this code?",
            "answer": "SyntaxError",
            "distractor1": "Too bad...",
            "distractor2": "Sorry, something went wrong...",
            "distractor3": "5",
            "description": "\ud83d\udca1 This code raises an unhandled SyntaxError: 'break' outside loop.<br><br>\ud83d\udca1 Any time you see the break keyword used outside of a loop (either 'for' or 'while'), this will raise a SyntaxError.<br><br>\ud83d\udca1 On the PCAP, watch out for keywords used in the wrong context.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 2,
            "objective": 1,
            "tags": [
                "exceptions",
                "break"
            ]
        },
        "pcap.2.1.3": {
            "code": "try:\n    print(5/0)\n\nexcept (ValueError, ZeroDivisionError):\n    print(\"Too bad...\")\n    \nexcept:\n    print(\"Sorry, something went wrong...\")",
            "question": "What is the expected output of this code?",
            "answer": "Too bad...",
            "distractor1": "Sorry, something went wrong...",
            "distractor2": "5",
            "distractor3": "SyntaxError",
            "description": "\ud83d\udca1 In the try block, 5/0 will raise a ZeroDivisionError, which will be caught in the first branch and print \"Too bad...\".<br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 2,
            "objective": 1,
            "tags": [
                ""
            ]
        },
        "pcap.2.1.4": {
            "code": "def foo(n):\n    try:\n        return 1/n\n    except ZeroDivisionError:\n        raise\n \ntry:\n    foo(0)\nexcept ArithmeticError:\n    tot = 2\nexcept:\n    tot = 1\n \nprint(tot)",
            "question": "What is the expected output of this code?",
            "answer": "2",
            "distractor1": "1",
            "distractor2": "This code raises an unhandled ZeroDivisionError",
            "distractor3": "SyntaxError",
            "description": "\ud83d\udca1 When the function foo(0) is called, this will raise a ZeroDivisionError in the function.  This will be caught by the except branch in the function.<br><br>\ud83d\udca1 Then the \"raise\" keyword will re-raise the same error.  This re-raising of the error will be caught in the main code ArithmeticError branch as a ZeroDivisionError is a subclass of ArithmeticError.<br><br>\ud83d\udca1 The \"raise\" keyword when used alone re-raises the current error being handled and can only be used in an exception branch.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 2,
            "objective": 1,
            "tags": [
                "exceptions",
                "raise",
                "exception hierarchy"
            ]
        },
        "pcap.2.1.5": {
            "code": "def foo(n):\n\tglobal m\n\tm = 0\n\tassert n != 0\n\ttry:\n\t\treturn 1/n\n\texcept ArithmeticError:\n\t\traise\n \ntry:\n  \tfoo(0)\nexcept ArithmeticError:\n\tm += 2\nexcept:\n\tm += 1\n \nprint(m)",
            "question": "What is the expected output of this code?",
            "answer": "1",
            "distractor1": "2",
            "distractor2": "SyntaxError: assert used in a function",
            "distractor3": "An AssertionError will be raised",
            "description": "\ud83d\udca1 When the function foo(0) is called on line 11, this will trigger an AssertionError inside of the function definition on line 4 since n != 0 is a False statement.<br><br>\ud83d\udca1 This exception is not handled inside of the function becuase an AssertionError is not a subclass of ArithmeticError.<br><br>\ud83d\udca1 Outside the function, this AssertionError will be handled by the abstract 'except' branch, which increments m to 1.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 2,
            "objective": 1,
            "tags": [
                ""
            ]
        },
        "pcap.2.1.6": {
            "code": "def foo(n):\n    global m\n    assert m != 0\n    try:\n        return 1/n\n    except ArithmeticError:\n        raise ValueError\n \ntry:\n    foo(0)\nexcept ArithmeticError:\n    m += 2\nexcept:\n    m += 1\n \nprint(m)",
            "question": "What is the expected output of this code?",
            "answer": "An unhandled NameError will occur.",
            "distractor1": "2",
            "distractor2": "1",
            "distractor3": "An AssertionError will be raised",
            "description": "\ud83d\udca1 This code raises an unhandled NameError due to the variable 'm' never having been defined.<br><br>\ud83d\udca1 This error occurs when the foo(0) function is called on line 10 - on line 2 an assertion is made about m, but m has not been defined.<br><br>\ud83d\udca1 The code is stopped at this point and none of the other potential error can occur.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 2,
            "objective": 1,
            "tags": [
                ""
            ]
        },
        "pcap.2.1.7": {
            "code": "try:\n    first_prompt = input(\"Enter the first value: \")\n    a = len(first_prompt)\n    second_prompt = input(\"Enter the second value: \")\n    b = second_prompt + 2\n    print(a/b)\nexcept ZeroDivisionError:\n    print(\"Do not divide by zero!\")\nexcept TypeError:\n    print(\"You can't do that!\")\nexcept:\n    print(\"Error.Error.Error.\")",
            "question": "What is the output of this code if the user responds with \"four\" to the first input and 0 to the second?",
            "answer": "You can't do that!",
            "distractor1": "Do not divide by zero!",
            "distractor2": "Error.Error.Error",
            "distractor3": "An unhandled ValueError will occur",
            "description": "\ud83d\udca1 This code raises a TypeError on line 5.  Since second_prompt is from the input() function, it is a string.  You can't add an integer and a string.<br><br>\ud83d\udca1 The PCAP will try to trick you with TypeErrors like this - khow your data types and their characteristics.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 2,
            "objective": 1,
            "tags": [
                ""
            ]
        },
        "pcap.2.1.8": {
            "code": "try:\n    first_prompt = input(\"Enter the first value: \")\n    a = len(first_prompt)\n    second_prompt = input(\"Enter the second value: \")\n    b = len(second_prompt) * 2\n    print(a/b)\nexcept ZeroDivisionError:\n    print(\"Do not divide by zero!\")\nexcept ValueError:\n    print(\"Wrong value.\")\nexcept:\n    print(\"Error.Error.Error.\")",
            "question": "What is the output of this code if the user responds with \"four\" to the first input and 2, to the second?",
            "answer": "2.0",
            "distractor1": "Wrong Value",
            "distractor2": "Error.Error.Error",
            "distractor3": "An unhandled TypeError will occur",
            "description": "\ud83d\udca1 The code prints 2.0 since a = len(\"four\") which equals 4 and b = len(\"2\") * 2 which is 2.<br><br>\ud83d\udca1 To get the value of b, notice that the input returns the string \"2\" which has length of 1, thus 1 * 2 = 3.<br><br>\ud83d\udca1 On line 6 the value 4/2 is printed, which is the float 2.0.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 2,
            "objective": 1,
            "tags": [
                ""
            ]
        },
        "pcap.2.2.1": {
            "code": "class MyException(Exception):\n    def __init__(self, msg):\n        self.msg = msg\n\ntry:\n    raise MyException(\"This is a custom exception\")\n\nexcept Exception as e:\n    print(\"First catch:\", e)\n\nexcept MyException as e:\n    print(\"Custom error catch\", e)\n\nexcept:\n    print(\"Something else\")",
            "question": "What is the expected output of this code?",
            "answer": "First catch: This is a custom exceptoin",
            "distractor1": "This is a custom exception",
            "distractor2": "Custom error catch",
            "distractor3": "Something else",
            "description": "\ud83d\udca1 The custom exception \"MyException\" is raised on line 6 and given the argument \"This is a custom exception\".<br><br>\ud83d\udca1 This exception will be handled by the Exception branch on line 8 - this is becuase MyException is a subclass of the Exception class.  The first branch to catch the error handles it.<br><br>\ud83d\udca1 On line 9, when e is printed, it prints the argument given when MyException was raised.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 2,
            "objective": 2,
            "tags": [
                ""
            ]
        },
        "pcap.2.2.2": {
            "code": "class MyException(Exception):\n    pass\n \ntry:\n    raise MyException\nexcept MyException as e:\n    print(\"MyException occurred!\")\nexcept Exception as e:\n    print(e)",
            "question": "What is the expected output of this code?",
            "answer": "MyException occurred!",
            "distractor1": "Exception",
            "distractor2": "This code is erroneous",
            "distractor3": "There is no exception raised",
            "description": "\ud83d\udca1 A instance of MyException is raised on line 5 and handled on line 6.<br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 2,
            "objective": 2,
            "tags": [
                "exceptions",
                "custom exceptions"
            ]
        },
        "pcap.2.2.3": {
            "code": "try:\n    if '42' == 42:\n        raise TypeError\nexcept TypeError:\n    print('TypeError has occured.')\nelse:\n    print('Oh no')",
            "question": "What is the expected output of this code?",
            "answer": "Oh no",
            "distractor1": "TypeError has occurred",
            "distractor2": "CustomError",
            "distractor3": "SyntaxError",
            "description": "\ud83d\udca1 This code raises no error.<br><br>\ud83d\udca1 The expression '42' == 42 is allowed; however, other comparisions would have raised a TypeError - for example '42' > 42 or '42' <= 42.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 2,
            "objective": 2,
            "tags": [
                "exceptions",
                "raise"
            ]
        },
        "pcap.2.2.5": {
            "code": "class CustomError(LookupError):\n    pass\n\nmy_colors = ['red', 'green', 'blue', 'yellow' ]\n\ntry:\n    print(my_colors[4])\n\nexcept KeyError as ke:\n    print(\"KeyError\")\n\nexcept IndexError as ie:\n    print(\"IndexError\")\n\nexcept CustomError as ce:\n    print(\"CustomError\")",
            "question": "What exception, if any, will be raised?",
            "answer": "IndexError",
            "distractor1": "KeyError",
            "distractor2": "CustomError",
            "distractor3": "No exception will be raised",
            "description": "\ud83d\udca1 The expression on line 7 will raise an IndexError since the list my_colors does not have an index 4.<br><br>",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 2,
            "objective": 2,
            "tags": [
                "exceptions",
                "custom exceptions"
            ]
        },
        "pcap.2.2.4": {
            "code": "class CustomError(LookupError):\n    pass\n\nmy_colors = ['red', 'green', 'blue', 'yellow' ]\n\ntry:\n    print(my_colors[4])\n\nexcept LookupError as le:\n    print(\"LookupError\")\n\nexcept KeyError as ke:\n    print(\"KeyError\")\n\nexcept IndexError as ie:\n    print(\"IndexError\")",
            "question": "Which exception, if any, will be raised by this code?",
            "answer": "LookupError",
            "distractor1": "KeyError",
            "distractor2": "IndexError",
            "distractor3": "No exception is raised.",
            "description": "\ud83d\udca1 In this case, the specific error is IndexError.  However, an IndexError is a subclass of LookupError, so the exception is actually handled on line 9.  LookupError will print.<br><br>\ud83d\udca1 Be aware of the order of exception branches, in this case the more general exception was listed first.<br><br>\ud83d\udca1 The CustomError definition is a red herring and should be ignored.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 2,
            "objective": 2,
            "tags": [
                "exceptions",
                "exception hierarchy"
            ]
        },
        "pcap.2.2.6": {
            "code": "class CustomError(LookupError):\n    pass\n\ntry:\n    raise CustomError\n\nexcept LookupError as le:\n    print(\"LookupError\")\n\nexcept CustomError as ce:\n    print(\"CustomError\")\n\nexcept:\n    print(\"An unexpected error has occured\")",
            "question": "What is the expected output of this code?",
            "answer": "LookupError",
            "distractor1": "CustomError",
            "distractor2": "An unexpected error has occurred",
            "distractor3": "SyntaxError: The CustomError must come first.",
            "description": "\ud83d\udca1 The output will be LookupError.<br><br>\ud83d\udca1 Even though a CustomError is being raised, it is handled by the LookupError branch becuase CustomError is a subclass of LookupError.<br><br>\ud83d\udca1 Remember that the first exception branch to match the raised exception or be in its hierarchy will handle the exception.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 2,
            "objective": 2,
            "tags": [
                "exceptions",
                "custom exceptions",
                "exception hierarchy"
            ]
        },
        "pcap.2.2.7": {
            "code": "class ScoreError(Exception):\n    def __init__(self, msg, score):\n        self.msg = f\"{msg} Score: {score}\"\n        super().__init__(self.msg)\n\ntry:\n\n    score = int(input(\"Enter your score\"))\n    if not 0 <= score <= 100:\n        raise ScoreError(\"The Score is out of bounds!\", score)\n\nexcept Exception as e:\n    print(e)\n\nelse:\n    print(\"Score has been registered.\")",
            "question": "What is the expected output of this code if the user enters 103?",
            "answer": "The Score is out of bounds! Score: 103",
            "distractor1": "The Score is out of bounds!",
            "distractor2": "Score has been registered",
            "distractor3": "An unhandled exception will occur",
            "description": "\ud83d\udca1 The answer is \"The Score is out of bounds! Score: 103\".<br><br>\ud83d\udca1 If the user enters 105, then the condition on line 9 will be True and a ScoreError will be raised.<br><br>\ud83d\udca1 Since ScoreError is a subclass of Exception, the exception will be handled by line 12/13.<br><br>\ud83d\udca1 Notice that ScoreError passes the self.msg when it invokes the super() constructor, so the Exception object will have the full formatted string in its args.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 2,
            "objective": 2,
            "tags": [
                "exceptions",
                "custom exceptions",
                "raise",
                "exception hierarchy"
            ]
        },
        "pcap.2.1.9": {
            "code": "my_data = (5, 3, 9, 2, 1)\n\nmy_slice = my_data[2:7:2]\n\nx = my_slice[2]\n\nprint(x)",
            "question": "Which line of this code will raise an exception?",
            "answer": "Line 5 will raise an IndexError",
            "distractor1": "Line 3 will raise an IndexError",
            "distractor2": "Line 3 will raise a SyntaxError",
            "distractor3": "Line 5 will raise a SyntaxError",
            "description": "\ud83d\udca1 The code on line 5 will raise an IndexError.<br><br>\ud83d\udca1 The tuple my_slice consists of (9, 1) and therefore there is no index 2.<br><br>\ud83d\udca1 It may seem like line 3 will raise an exception since the end index is 7; however, end values out of range in slicing to not raise exceptions.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 2,
            "objective": 1,
            "tags": [
                "exceptions",
                "IndexError"
            ]
        },
        "pcap.2.2.8": {
            "code": "class Disaster(Exception):\n    def __init__(self, message):\n        self.message = message\n    \n    def __str__(self):\n        return \"A Disaster has occurred!\"\n    \ntry:\n    print(\"We have liftoff:\", end=\" \")\n    raise Disaster(\"It's a disaster!\")\nexcept Disaster as d:\n    print(d)\nelse:\n    print(\"We are off to Mars!\")",
            "question": "What is the expected output of this code?",
            "answer": "We have liftoff: A Disaster has occurred!",
            "distractor1": "We have liftoff: It's a disaster!",
            "distractor2": "We are off to Mars!",
            "distractor3": "It's a disaster!",
            "description": "\ud83d\udca1 The print on line 9 will print \"We have liftoff\" then a Disaster exception will be raised on line 10.  This will be handled by lines 11/12.<br><br>\ud83d\udca1 When you print an object, it will print whatever the __str__ method returns - \"A Disaster has occurred!\".",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 2,
            "objective": 2,
            "tags": [
                "exceptions",
                "custom exceptions",
                "raise",
                "OOP",
                "__str__ method",
                "__init__ method"
            ]
        },
        "pcap.2.2.9": {
            "code": "class EntryError(ValueError):\n    def __init__(self, msg):\n        self.msg = msg\n    \n    def __str__(self):\n        return f\"EntryError: {self.msg}\"\n    \ntry:\n    entry = 78\n    if entry > 75:\n        raise EntryError(f\"The value is {entry}.\")\n\nexcept ValueError as v:\n    print(v)\n\nelse:\n    print(\"The entry is valid\")",
            "question": "What is the expected output of this code?",
            "answer": "EntryError: The value is 78",
            "distractor1": "The entry is valid",
            "distractor2": "EntryError",
            "distractor3": "This code raises an unhandled exception",
            "description": "\ud83d\udca1 The condition on line 10 is True, therefore an EntryError is raised.  Since EntryError is a subclass of ValueError, it will be handled on line 13/14.<br><br>\ud83d\udca1 When the exception object v is printed, it prints whatever the __str__method returns, which is \"EntryError: The value is 78\".",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 2,
            "objective": 2,
            "tags": [
                "exceptions",
                "custom exceptions",
                "raise",
                "__str__ method",
                "__init__ method",
                "OOP"
            ]
        },
        "pcap.2.1.10": {
            "code": "def checker(x):\n    assert x >= 0\n    return x ** 0.5\n\ndef intro(x):\n    try:\n        checker(x)\n    except FunctionError:\n        raise\n\ntry:\n    tot = intro(-5)\n\nexcept RuntimeError:\n    tot = 5\n\nexcept AssertionError:\n    tot = 7\n\nexcept:\n    tot = 10\n\nprint(tot)",
            "question": "What is the expected output of this code",
            "answer": "10",
            "distractor1": "5",
            "distractor2": "7",
            "distractor3": "An unhandled exception occurs",
            "description": "\ud83d\udca1 The exception that is being raised is a NameError on line 8 - FunctionError is not defined (it is not a built-in exception).<br><br>\ud83d\udca1 This causes the call of the intro function to raise an exception that will be caught by the abstract except branch on line 20.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 2,
            "objective": 1,
            "tags": [
                ""
            ]
        },
        "tutorial.1.1": {
            "code": "# Python code will appear here\n\nprint(\"Hello Test Prepper!\")\n\n'''\n\nAfter you answer a question, you can run this code\nby clicking the \"Run Code\" button to the right\nof this window.\n\nYou can also change this code an re-run it to see\nwhat affect your changes had.  Do this frequently\nas this will help you better understand the code!\n\n'''",
            "question": "Here will be a question - it could be a question about the code in the window to the left, or a stand-along question",
            "answer": "This will be an answer choice \"choose me!\"",
            "distractor1": "This will be another choice",
            "distractor2": "This will be another choice",
            "distractor3": "This will be another choice",
            "description": "\ud83d\udca1 After a question is answered, a description of the solution will appear here.<br><br>\ud83d\udca1 To the right, you will find XP scores and a % accuracy for the current curriculum.<br><br>\ud83d\udca1 In the navbar at the top, you will find information about the curriculum, the question, the status, and a timer.  There are also buttons for a scratch pad and a calculator.<br><br>\ud83d\udca1 When you want to move on, just press the \"Next Question\" button.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 0.1,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 1,
            "objective": 1,
            "tags": [
                "intro"
            ]
        },
        "pcap.5.1.1": {
            "code": "x = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\n \ndef func(data):\n    res = data[0][0]\n    for da in data:\n        for d in da:\n            if res < d:\n                res = d\n    return res\n \nprint(func(x[0]))",
            "question": "That is the expected output of this code?",
            "answer": "4",
            "distractor1": "5",
            "distractor2": "3",
            "distractor3": "7",
            "description": "\ud83d\udca1<code>res=data[0][0]</code> sets the value of res to 1 initially.<br><br>\ud83d\udca1 The outer loop will loop through the list <code>[[1,2],[3,4]]</code> - this comes from the function argument <code>x[0]</code>.<br><br>\ud83d\udca1 The inner loop loops through each digit in each list and sets <code>res</code> equal to the digit if it is greater than res.  Effectively <code>res</code> gets set to the highest digit in the lists, which is 4.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 5,
            "objective": 1,
            "tags": [
                "lists",
                "nested lists",
                "functions",
                "nested loops"
            ]
        },
        "pcap.3.1.1": {
            "code": "",
            "question": "Which of the following expressions evaluate to True?",
            "answer": "ord(\"z\") - ord(\"Z\") == ord(\" \")",
            "distractor1": "ord(\"A\") - ord(\"a\") >= 0",
            "distractor2": "ord(\" \") != 32",
            "distractor3": "chr(ord(\"F\") + 3) == \"K\"",
            "description": "\ud83d\udca1 The codepoints of lower-case english letters are exactly 32 greater than their upper-case counterparts and the codepoint of the space (\" \") is 32.  So the expression:<br><br><code>ord(\"z\") - ord(\"Z\") == ord(\" \")</code><br><br> is true.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 0.75,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 3,
            "objective": 1,
            "tags": [
                "strings",
                "chr",
                "ord",
                "code points",
                "unicode",
                "ascii"
            ]
        },
        "pcap.3.1.2": {
            "code": "a = \"What's up doc?\"\n\nb = 'Be vewy quiet, I\\'m hunting wabbits!'\n\nc = a + \" \" + b\n\nprint(c)",
            "question": "What is the expected output of this code?",
            "answer": "What's up doc? Be vewy quiet, I'm hunting wabbits!",
            "distractor1": "What's up doc? Be vewy quiet, Im hunting wabbits",
            "distractor2": "This code will raise an unhandled exception.",
            "distractor3": "What's up doc? Be vewy quiet, I'\\m hunting wabbits",
            "description": "\ud83d\udca1 The \"\\'\" escapes the \"'\" taking away its property of beginning or ending a string.  Thus it just becomes a regular apostrophe and prints as such.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 3,
            "objective": 1,
            "tags": [
                "strings",
                "escape codes",
                "concatenation"
            ]
        },
        "pcap.3.1.3": {
            "code": "text = \"Once upon a time\\nThere was a giant turtle\\n\"\n\nprint(text, \"His name was Edward\")",
            "question": "How many lines will print?",
            "answer": "3",
            "distractor1": "2",
            "distractor2": "1",
            "distractor3": "This code is erroneous.",
            "description": "\ud83d\udca1 This code prints on three lines - the string \"text\", when printed, will print on two lines and ends with an extra new-line escape sequence (\"\\n\") to create a third line.<br><br>\ud83d\udca1 The string \"His name was Edward\" prints on the third line.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 1.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 3,
            "objective": 1,
            "tags": [
                "strings",
                "escape sequences"
            ]
        },
        "pcap.1.3.2": {
            "code": "import ???\n\ncolors = [\"red\", \"green\", \"purple\", \"blue\", \"violet\"]\n\nprint(???.choice(colors))",
            "question": "What module needs to be imported and used in order for this code to work?",
            "answer": "random",
            "distractor1": "choice",
            "distractor2": "math",
            "distractor3": "platform",
            "description": "\ud83d\udca1 The <code>choice</code> function resides in the <code>random</code> module.<br><br>\ud83d\udca1 When the module is imported in this way, to invoke the function use dot.notation <code>random.choice(colors)</code>.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 0.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 3,
            "tags": [
                "import variants",
                "random",
                "choice()"
            ]
        },
        "pcap.1.3.3": {
            "code": "import random\n\n???\n\nfor n in range(5):\n  print(random.random())",
            "question": "Which expression below will cause this code to print the same sequence each time?",
            "answer": "random.seed(0)",
            "distractor1": "random.random_off()",
            "distractor2": "random.lock()",
            "distractor3": "random.seed()",
            "description": "\ud83d\udca1 Setting the seed value using <code>seed()</code> to any integer will cause the random module produce the same samples.<br><br>\ud83d\udca1 You can create different sequences by changing the argument to seed; however, each time you run your program, the same sequences will be produced.<br><br>\ud83d\udca1 To return your program to generating pseudo random numbers, run <code>seed()</code> - when run with no argument, it is set back to the default.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 1.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 3,
            "tags": [
                "modules and packages",
                "random",
                "seed"
            ]
        },
        "pcap.1.3.4": {
            "code": "import random\n\nprint(random.???)",
            "question": "Which of the expressions would allow this code to randomly print a whole number from 1 to 100 inclusive?",
            "answer": "randrange(1,101)",
            "distractor1": "randint(1,99)",
            "distractor2": "randint(1,101)",
            "distractor3": "randrange(1,100)",
            "description": "\ud83d\udca1 <code>randrange(1,101)</code> is correct.  The end value is exclusive, so in order to include 100, the end must be set to 101.<br><br>\ud83d\udca1 <code>randint</code> can also work, however, these selections do not have correct end values.  <code>randint(1,99)</code> would not include 100 and <code>randint(1,101)</code> would include 101.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 1.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 3,
            "tags": [
                "import variants",
                "random",
                "randrange()"
            ]
        },
        "pcap.1.3.5": {
            "code": "from random import choice, sample, randint, randrange\n\n\nnames = [\"Dan\", \"Anne\", \"Carol\", \"Paul\", \"Deb\", \"Phil\", \"Kim\"]\n\n\n\n",
            "question": "Which of the following expressions will NOT correctly select a single item from the list \"names\" randomly?",
            "answer": "names[randrange(1, len(names))]",
            "distractor1": "choice(names)",
            "distractor2": "sample(names, 1)[0]",
            "distractor3": "names[randint(0, len(names) - 1)]",
            "description": "\ud83d\udca1 In the cases of <code>randrange</code> and <code>randint</code>, these functions are used to generate an index at random which is used to select an item from \"names\".<br><br>\ud83d\udca1 The range of indexes that randrange(1, len(names)) will return is from 1 to 6 - so the value at index 0 or \"Dan\" will never be randomly selected.<br><br>\ud83d\udca1 <code>sample(names, 1)[0]</code> works because when you sample from a list, a list is returned.  Since there is only one element in the list, the index [0] will retrieve it.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 3,
            "tags": [
                "modules and packages",
                "random",
                "randrange",
                "randint",
                "sample",
                "choice",
                "indexing"
            ]
        },
        "tutorial.1.2": {
            "code": "# Here is some example code\n\nname = \"Your Name\"\n\ngreeting = f\"Hello, my name is {name} and I am glad to see you!\"\n\nprint(greeting)\n\n",
            "question": "How and when can you write and execute code in the code editor?",
            "answer": "Using the \"Run Code\" button after you have answered a question.",
            "distractor1": "You can't run the code, ever!",
            "distractor2": "By doing 50 pushups.",
            "distractor3": "Do 50 pushups, now, I'm not joking.",
            "description": "\ud83d\udca1 As you answer questions, the Run Code button becomes available.<br><br>\ud83d\udca1 Make sure you experiment with the code after you answer questions, try changing values or adding new code to see what happens.<br><br>\ud83d\udca1 This way you will gain a deeper understanding of Python.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 0.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 1,
            "objective": 2,
            "tags": [
                ""
            ]
        },
        "tutorial.1.3": {
            "code": "from random import random, choice\n\ndifficulties = [0.5, 1, 1.5, 2, 2.5, 3]\n\nxp = 0\n\nfor n in range(30):\n  draw = 0\n  if random() <= 0.7:\n    draw = 1\n  xp += draw * choice(difficulties)\n  \nprint(f\"Your XP is: {xp:.2f}\")\n\n",
            "question": "What does XP measure?",
            "answer": "Your overall Python coding skill",
            "distractor1": "The liklihood of a thunderstorm.",
            "distractor2": "The time left in the day.",
            "distractor3": "The time you spend on TikTok.",
            "description": "\ud83d\udca1 XP is a a measure of your overall Python coding skill.<br><br>\ud83d\udca1 As you successfully answer questions and complete tasks, your XP goes up.<br><br>\ud83d\udca1 When you get questions or tasks wrong, your XP goes down.",
            "video": "",
            "video_start": null,
            "video_end": null,
            "difficulty": 0.0,
            "creator_id": 9,
            "content_id": "pcep",
            "standard": 1,
            "objective": 3,
            "tags": [
                ""
            ]
        },
        "pcap.1.1.6": {
            "code": "import math\n\nprint(???(math))",
            "question": "What function should replace the \"?\" to allow this script to print a list of all attributes and methods in teh math module?",
            "answer": "dir",
            "distractor1": "list",
            "distractor2": "show",
            "distractor3": "dict",
            "description": "\ud83d\udca1The dir() function will print a list of all the names in a module.<br><br>\ud83d\udca1 To avoid seeing common special attributes that are in all modules such as \"__name__\", \"__doc__\", etc. you can filter them out like this example:<br><br><code>print([item for item in dir(math) if \"_\" not in item])</code>",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 1.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 1,
            "tags": [
                "import variants",
                "dir() function"
            ]
        },
        "pcap.1.1.7": {
            "code": "import random as ran\n\nprint(len(dir(random)) != 0)",
            "question": "What is the expected output of this code?",
            "answer": "This code will raise an exception",
            "distractor1": "True",
            "distractor2": "False",
            "distractor3": "It prints a list of all attributes and methods in the random module",
            "description": "\ud83d\udca1 The random module is being imported with the alias \"ran\".<br><br>\ud83d\udca1 In order to access it, use the alias like this:<br><br><code>print(len(dir(ran)) != 0)</code>\ud83d\udca1<br><br>This code will print <code>True</code> since the random module has many items in its directory.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 1,
            "tags": [
                "import variants",
                "import as",
                "dir()"
            ]
        },
        "pcap.1.1.8": {
            "code": "",
            "question": "If a module or its folder is not located in the project's root directory, the path to that module would need to be in what attribute of the sys module?",
            "answer": "sys.path",
            "distractor1": "path.sys",
            "distractor2": "sys.module",
            "distractor3": "os.module",
            "description": "\ud83d\udca1The sys.path attribute is a list of paths where the Python interpreter will search for modules.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 0.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 1,
            "tags": [
                "sys.path"
            ]
        },
        "pcap.1.1.9": {
            "code": "import sys\n\nprint(isinstance(sys.path, tuple))",
            "question": "What is the expected output of this code?",
            "answer": "False",
            "distractor1": "True",
            "distractor2": "Prints the sys.path as a tuple",
            "distractor3": "This code raises an exception",
            "description": "\ud83d\udca1 The sys.path attribute is a list, not a tuple.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 1.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 1,
            "tags": [
                "import variants",
                "sys.path",
                "inheritance",
                "isinstance()"
            ]
        },
        "pcap.1.1.10": {
            "code": "import sys\n\nif sys.path:\n  print(isinstance(sys.path[0], str))",
            "question": "What is the expected output of this code?",
            "answer": "True",
            "distractor1": "False",
            "distractor2": "It prints the first path in sys.path",
            "distractor3": "This code raises an exception",
            "description": "\ud83d\udca1The paths in sys.path are strings, so this would be True.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 1.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 1,
            "tags": [
                "import variants",
                "sys.path",
                "inheritance",
                "isinstance()"
            ]
        },
        "pcap.1.1.11": {
            "code": "import sys\n\nprint(isinstance(sys.path, list))",
            "question": "What is the expected output of this code?",
            "answer": "True",
            "distractor1": "False",
            "distractor2": "Prints the sys.path as a tuple",
            "distractor3": "This code raises an exception",
            "description": "\ud83d\udca1 The sys.path attribute is a list, so this is True.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 1.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 1,
            "tags": [
                "import variants",
                "sys.path",
                "inheritance",
                "isinstance()"
            ]
        },
        "pcap.1.1.12": {
            "code": "from math import pi\n\ndef area_circle(r):\n  return math.pi * r ** 2\n\ndef area_square(s):\n  return s ** 2\n\nprint( area_square(5) > area_circle(5) )",
            "question": "What is the expected ouput of this code?",
            "answer": "NameError",
            "distractor1": "True",
            "distractor2": "False",
            "distractor3": "ValueError",
            "description": "\ud83d\udca1 The import statement imports the attribute pi into the project namespace, so the name \"math\" is not defined.  This code raises a NameError.<br><br>\ud83d\udca1 Since pi exists in the project namespace, you can use it like this:<br>br><code>return pi * r ** 2</code><br><br>\ud83d\udca1 Use dot notation if the math module were imported like this:<br><br><code>import math</code?",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "",
            "standard": 1,
            "objective": 1,
            "tags": [
                ""
            ]
        },
        "pcap.1.2.2": {
            "code": "from math import factorial\n\nx = factorial(3)\n\ny = 6\n\nprint( (x / y) == 1)",
            "question": "What is the expected output of this code?",
            "answer": "True",
            "distractor1": "False",
            "distractor2": "ValueError",
            "distractor3": "ImportError",
            "description": "\ud83d\udca1 Since <code>factorial(3)</code> = 3*2*1 which is 6, the boolean comparison is True.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 2,
            "tags": [
                "import variants",
                "math",
                "factorial"
            ]
        },
        "pcap.1.2.3": {
            "code": "from math import trunc\n\npi = trunc(pi)\n\nprint( type(pi) )",
            "question": "What is the expected output of this code?",
            "answer": "<class 'int'>",
            "distractor1": "<class 'str'>",
            "distractor2": "<class 'float'>",
            "distractor3": "error",
            "description": "\ud83d\udca1 The <code>trunc</code> function truncates any decimal component and returns an integer.<br><br>\ud83d\udca1 The result of this code is <code><class 'int'></code>",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 2,
            "tags": [
                "import variants",
                "pi",
                "trunc()"
            ]
        },
        "pcap.1.2.4": {
            "code": "from math import ????\n\ndef hypotenuse(a,b):\n  \n  return ????(a ** 2 + b ** 2)",
            "question": "What function from the math module would complete this function and allow it to return the length of a hypotenuse with length of sides a and b?",
            "answer": "sqrt",
            "distractor1": "hypot",
            "distractor2": "square",
            "distractor3": "pow",
            "description": "\ud83d\udca1 In order for this function to properly calculate the length of the hypotenuse, you would need to import and use the <code>sqrt</code> function from the math module.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 2,
            "tags": [
                "import variants",
                "math",
                "sqrt()"
            ]
        },
        "pcap.1.2.6": {
            "code": "from math import sqrt\n\ndef hypotenuse(a,b):\n  \n  return sqrt(a ** 2 + b ** 2)",
            "question": "Rather than using the function shown, to calculate the length of a hypotenuse of a triangle, you can use what function from the math module?",
            "answer": "hypot()",
            "distractor1": "hypotenuse()",
            "distractor2": "side_c()",
            "distractor3": "sqrt()",
            "description": "\ud83d\udca1 The <code>hypot</code> function from the math module will calcluate the length of a hypotenuse.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 1.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 2,
            "tags": [
                "import variants",
                "math",
                "hypot()",
                "sqrt()"
            ]
        },
        "pcap.1.2.7": {
            "code": "from math import trunc\n\nprint( int(3.14) == trunc(3.14) )",
            "question": "What is the expected output of this code?",
            "answer": "True",
            "distractor1": "False",
            "distractor2": "Error",
            "distractor3": "0",
            "description": "\ud83d\udca1 Both the built-in <code>int()</code> function and the <code>trunc()</code> function from the math module drop the decimal part of a floating point number, so this expression is True.<br><br>\ud83d\udca1 The <code>int()</code> function can convert strings of different number bases to integer.  So even though both functions return the same value in this case, they have different uses.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 2,
            "tags": [
                "import variants",
                "from import",
                "trunc()"
            ]
        },
        "pcap.1.2.8": {
            "code": "from math import floor, ceil\n\nx = 5.65\n\ny = -5.21\n\nz = 4.01\n\nif floor(x) > ceil(z):\n  print( trunc(y) )\n  \nelif ceil(x) - floor(z) - 2 == 0:\n  print( ceil(y) )\n\n",
            "question": "What is the expected output of this code?",
            "answer": "-5",
            "distractor1": "5",
            "distractor2": "6",
            "distractor3": "-6",
            "description": "\ud83d\udca1 The first condition <code>floor(x) > ceil(z)</code> simplifies to 5 > 5, which is false.<br><br>\ud83d\udca1 The elif condition <code>ceil(x) - floor(z) - 2 == 0 </code> simplifies to 6 - 4 - 2 == 0, which is true.<br><br>\ud83d\udca1 The expression <code>ceil(y)</code> will print and <code>ceil(-5.21)</code> is -5.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 2,
            "tags": [
                "import variants",
                "from import",
                "floor()",
                "ceil()",
                "math"
            ]
        },
        "pcap.1.2.9": {
            "code": "",
            "question": "What module would you need to import to use the sqrt() function?",
            "answer": "math",
            "distractor1": "random",
            "distractor2": "geometry",
            "distractor3": "None - sqrt() is a built-in function",
            "description": "\ud83d\udca1 The <code>sqrt()</code> function is part of the math module.<br><br>\ud83d\udca1 The way you use this function depends on your import statement.<br><br>\ud83d\udca1 If you imported like this: <code>import math</code>, then you use it like this:<br><code>x = math.sqrt(9)</code>.<br><br>\ud83d\udca1 If your import statment was like this:<code>from math import sqrt</code> or <code>from math import *</code>, then you use it like this:<br><code>x = swrt(9)</code>.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 0.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 2,
            "tags": [
                "math",
                "sqrt()"
            ]
        },
        "pcap.1.2.10": {
            "code": "from math import fact\n\nfor n in range(1,5):\n  print(math.fact(n), end = \" \")",
            "question": "What is the expected output of this code?",
            "answer": "ImportError",
            "distractor1": "24 6 2 1",
            "distractor2": "120 24 6 2 1",
            "distractor3": "NameError",
            "description": "\ud83d\udca1 The import statement brings the <code>fact()</code> function into the project namespace.  As a result, there is no need to use the dot.notation to access the math module.<br><br>\ud83d\udca1 The correct usage would just be:<br><br><code>fact(n)</code>",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 2,
            "tags": [
                "import variants",
                "math",
                "fact()",
                "for loop"
            ]
        },
        "pcap.1.2.11": {
            "code": "from math import trunc, ceil, floor\n\na = trunc(5.55) > ceil(-4.44)\n\nb = floor(-6.2) > trunc(-6.2)\n\nc = ceil(7.21) >= int(8.15)\n\nd = floor(-2.3) - trunc(3.2) == 0\n\nprint(a, b, c, d)",
            "question": "Based on these four boolean expressions, which of a, b, c, d evaluate to True?",
            "answer": "a, c",
            "distractor1": "a, c, d",
            "distractor2": "b, c, d",
            "distractor3": "a, b, d",
            "description": "\ud83d\udca1 a simplifies to 5 > -4, which is True.<br><br>\ud83d\udca1 b simplifies to -7 > -6, which is False.<br><br>\ud83d\udca1 c simplifies to 8 >= 8, which is True.<br><br>\ud83d\udca1 d simplifies to -3 - 3 == 0, which is False (it is -6).<br><br>\ud83d\udca1 The correct answer is a, c.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 2.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 2,
            "tags": [
                "import variants",
                "math",
                "trunc()",
                "ceil()",
                "floor()",
                "int()"
            ]
        },
        "pcap.1.2.12": {
            "code": "",
            "question": "Which function from the math module would transform the floating point number -9.46 to the integer -10?",
            "answer": "floor()",
            "distractor1": "ceil()",
            "distractor2": "trunc()",
            "distractor3": "There is no such function",
            "description": "",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 0.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 2,
            "tags": [
                "math",
                "floor()"
            ]
        },
        "pcap.1.3.7": {
            "code": "from random import random\n\nmean = 1\n\ndraw = random()\n\n",
            "question": "What is the Python data type of draw?",
            "answer": "float",
            "distractor1": ".65",
            "distractor2": "integer",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 draw is type float.<br><br>The <code>random()</code> function returns a floating point number between 0 and 1.<br><br>",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 1.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 3,
            "tags": [
                "import variants",
                "random",
                "random()"
            ]
        },
        "pcap.1.3.8": {
            "code": "",
            "question": "What module needs to be imported to use the choice() function",
            "answer": "random",
            "distractor1": "math",
            "distractor2": "platform",
            "distractor3": "os",
            "description": "\ud83d\udca1 The shuffle function is part of the random module.<br><br>\ud83d\udca1 Use it to randomly change the order of a data collection like this:<br><br><code>import random<br><br>my_list=[1,2,3,4,5]<br>math.shuffle(my_list)</code>",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 0.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 3,
            "tags": [
                "import variants",
                "random",
                "choice()"
            ]
        },
        "pcap.1.3.9": {
            "code": "from random import randint, ????\n\n????(0)\n\nfor n in range(10):\n  \n  print( randint(1, 100) )",
            "question": "What function from the random module needs to be imported and used to cause the for loop to produce the same number sequence each time the code is executed?",
            "answer": "seed()",
            "distractor1": "randint()",
            "distractor2": "shuffle()",
            "distractor3": "choice()",
            "description": "\ud83d\udca1 Setting the seed value using <code>seed()</code> to any integer will cause the random module produce the same samples.<br><br>\ud83d\udca1 You can create different sequences by changing the argument to seed; however, each time you run your program, the same sequences will be produced.<br><br>\ud83d\udca1 To return your program to generating pseudo random numbers, run <code>seed()</code> - when run with no argument, it is set back to the default.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 0.5,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 3,
            "tags": [
                "import variants",
                "random",
                "seed()"
            ]
        },
        "pcap.1.3.10": {
            "code": "from random import random, randint\n\nx = 7\n\ny = random()\n\nz = x * y\n\nprint( z > x )",
            "question": "What is the result of this code?",
            "answer": "False",
            "distractor1": "True",
            "distractor2": "3.5",
            "distractor3": "This code is erroneous",
            "description": "\ud83d\udca1 Since <code>random()</code> produces a number between 0 and 1, z cannot be greater than x since x * any number less than or equal to 1 will be less than or equal to x.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 1.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 3,
            "tags": [
                "import variants",
                "random",
                "random()",
                "randint()",
                "boolean expressions"
            ]
        },
        "pcap.1.3.11": {
            "code": "import random\n\ndata = 575\n\ntry:\n  \n  random.shuffle(data)\n  print(\"Shuffling data\")\n  \nexcept TypeError:\n  \n  print(\"shuffle only works with mutable sequence types like lists\")\n  \nexcept Exception as e:\n  \n  print(f\"An error has occurred {e}\")\n  \nelse:\n  \n  print(\"data is shuffled!\")",
            "question": "What is the expected output of this code?",
            "answer": "shuffle only works with mutable sequence types like lists",
            "distractor1": "An error has occurred",
            "distractor2": "Shuffling data",
            "distractor3": "data is shuffled!",
            "description": "\ud83d\udca1 The code in the <code>try</code> block raises a TypeError.<br><br>\ud83d\udca1 The TypeError will be handled in the first exception branch and print \"shuffle only works with mutable sequence types like lists\".",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 3.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 3,
            "tags": [
                "import variants",
                "random",
                "exception handling",
                "shuffle()"
            ]
        },
        "pcap.1.3.12": {
            "code": "import random\n\ndata = [2,6,3,4,7,2,4]\n\ndraw = random.choice(data)\n\nprint( draw not in data )",
            "question": "What is the expected output of this code?",
            "answer": "False",
            "distractor1": "True",
            "distractor2": "ValueError",
            "distractor3": "it will print a number that is not in data",
            "description": "\ud83d\udca1 The expression <code>random.choice(data)</code> will randomly select a value from the list \"data\" but not remove it.<br><br>\ud83d\udca1 The value selected and saved in variable \"draw\" will be one of the numbers in \"data\", therefore the expression <code>draw not in data</code> is False.",
            "video": "",
            "video_start": 0,
            "video_end": 0,
            "difficulty": 2.0,
            "creator_id": 9,
            "content_id": "pcap",
            "standard": 1,
            "objective": 1,
            "tags": [
                "import variants",
                "random",
                "choice()",
                "boolean expressions"
            ]
        }
    }
}